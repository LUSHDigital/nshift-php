<?php
/**
 * ShipServerApi
 * PHP version 5
 *
 * @category Class
 * @package  LUSHDigital\NShiftPHP
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * nShift DeliveryHub API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 16.134.1.11
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.35
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace LUSHDigital\NShiftPHP\ShipServer;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use LUSHDigital\NShiftPHP\ApiException;
use LUSHDigital\NShiftPHP\Configuration;
use LUSHDigital\NShiftPHP\HeaderSelector;
use LUSHDigital\NShiftPHP\ObjectSerializer;

/**
 * ShipServerApi Class Doc Comment
 *
 * @category Class
 * @package  LUSHDigital\NShiftPHP
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipServerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation shipServerActorIDAvailableServicesGet
     *
     * Get Products for actor
     *
     * @param  int $actorID Actor ID (required)
     * @param  bool $includeCarriers Include Carriers in response (optional, default to true)
     * @param  bool $includeSubCarriers Include SubCarriers in response (optional, default to false)
     * @param  bool $includeProducts Include Products in response (optional, default to true)
     * @param  bool $includeIcons Include Carrier Icons in response, (optional, default to false)
     * @param  bool $includeServices Include Services in response, (optional, default to true)
     * @param  bool $includeGoodsTypes Include Goods Types in response, (optional, default to true)
     * @param  bool $includeValidations Include validation rules for products in response (optional, default to false)
     * @param  int $carrierConcepID Return data only for carrier with this concept ID (optional, default to 0)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDAvailableServicesGet($actorID, $includeCarriers = 'true', $includeSubCarriers = 'false', $includeProducts = 'true', $includeIcons = 'false', $includeServices = 'true', $includeGoodsTypes = 'true', $includeValidations = 'false', $carrierConcepID = '0')
    {
        $this->shipServerActorIDAvailableServicesGetWithHttpInfo($actorID, $includeCarriers, $includeSubCarriers, $includeProducts, $includeIcons, $includeServices, $includeGoodsTypes, $includeValidations, $carrierConcepID);
    }

    /**
     * Operation shipServerActorIDAvailableServicesGetWithHttpInfo
     *
     * Get Products for actor
     *
     * @param  int $actorID Actor ID (required)
     * @param  bool $includeCarriers Include Carriers in response (optional, default to true)
     * @param  bool $includeSubCarriers Include SubCarriers in response (optional, default to false)
     * @param  bool $includeProducts Include Products in response (optional, default to true)
     * @param  bool $includeIcons Include Carrier Icons in response, (optional, default to false)
     * @param  bool $includeServices Include Services in response, (optional, default to true)
     * @param  bool $includeGoodsTypes Include Goods Types in response, (optional, default to true)
     * @param  bool $includeValidations Include validation rules for products in response (optional, default to false)
     * @param  int $carrierConcepID Return data only for carrier with this concept ID (optional, default to 0)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDAvailableServicesGetWithHttpInfo($actorID, $includeCarriers = 'true', $includeSubCarriers = 'false', $includeProducts = 'true', $includeIcons = 'false', $includeServices = 'true', $includeGoodsTypes = 'true', $includeValidations = 'false', $carrierConcepID = '0')
    {
        $returnType = '';
        $request = $this->shipServerActorIDAvailableServicesGetRequest($actorID, $includeCarriers, $includeSubCarriers, $includeProducts, $includeIcons, $includeServices, $includeGoodsTypes, $includeValidations, $carrierConcepID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDAvailableServicesGetAsync
     *
     * Get Products for actor
     *
     * @param  int $actorID Actor ID (required)
     * @param  bool $includeCarriers Include Carriers in response (optional, default to true)
     * @param  bool $includeSubCarriers Include SubCarriers in response (optional, default to false)
     * @param  bool $includeProducts Include Products in response (optional, default to true)
     * @param  bool $includeIcons Include Carrier Icons in response, (optional, default to false)
     * @param  bool $includeServices Include Services in response, (optional, default to true)
     * @param  bool $includeGoodsTypes Include Goods Types in response, (optional, default to true)
     * @param  bool $includeValidations Include validation rules for products in response (optional, default to false)
     * @param  int $carrierConcepID Return data only for carrier with this concept ID (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDAvailableServicesGetAsync($actorID, $includeCarriers = 'true', $includeSubCarriers = 'false', $includeProducts = 'true', $includeIcons = 'false', $includeServices = 'true', $includeGoodsTypes = 'true', $includeValidations = 'false', $carrierConcepID = '0')
    {
        return $this->shipServerActorIDAvailableServicesGetAsyncWithHttpInfo($actorID, $includeCarriers, $includeSubCarriers, $includeProducts, $includeIcons, $includeServices, $includeGoodsTypes, $includeValidations, $carrierConcepID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDAvailableServicesGetAsyncWithHttpInfo
     *
     * Get Products for actor
     *
     * @param  int $actorID Actor ID (required)
     * @param  bool $includeCarriers Include Carriers in response (optional, default to true)
     * @param  bool $includeSubCarriers Include SubCarriers in response (optional, default to false)
     * @param  bool $includeProducts Include Products in response (optional, default to true)
     * @param  bool $includeIcons Include Carrier Icons in response, (optional, default to false)
     * @param  bool $includeServices Include Services in response, (optional, default to true)
     * @param  bool $includeGoodsTypes Include Goods Types in response, (optional, default to true)
     * @param  bool $includeValidations Include validation rules for products in response (optional, default to false)
     * @param  int $carrierConcepID Return data only for carrier with this concept ID (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDAvailableServicesGetAsyncWithHttpInfo($actorID, $includeCarriers = 'true', $includeSubCarriers = 'false', $includeProducts = 'true', $includeIcons = 'false', $includeServices = 'true', $includeGoodsTypes = 'true', $includeValidations = 'false', $carrierConcepID = '0')
    {
        $returnType = '';
        $request = $this->shipServerActorIDAvailableServicesGetRequest($actorID, $includeCarriers, $includeSubCarriers, $includeProducts, $includeIcons, $includeServices, $includeGoodsTypes, $includeValidations, $carrierConcepID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDAvailableServicesGet'
     *
     * @param  int $actorID Actor ID (required)
     * @param  bool $includeCarriers Include Carriers in response (optional, default to true)
     * @param  bool $includeSubCarriers Include SubCarriers in response (optional, default to false)
     * @param  bool $includeProducts Include Products in response (optional, default to true)
     * @param  bool $includeIcons Include Carrier Icons in response, (optional, default to false)
     * @param  bool $includeServices Include Services in response, (optional, default to true)
     * @param  bool $includeGoodsTypes Include Goods Types in response, (optional, default to true)
     * @param  bool $includeValidations Include validation rules for products in response (optional, default to false)
     * @param  int $carrierConcepID Return data only for carrier with this concept ID (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDAvailableServicesGetRequest($actorID, $includeCarriers = 'true', $includeSubCarriers = 'false', $includeProducts = 'true', $includeIcons = 'false', $includeServices = 'true', $includeGoodsTypes = 'true', $includeValidations = 'false', $carrierConcepID = '0')
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDAvailableServicesGet'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/availableServices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includeCarriers !== null) {
            $queryParams['includeCarriers'] = ObjectSerializer::toQueryValue($includeCarriers, null);
        }
        // query params
        if ($includeSubCarriers !== null) {
            $queryParams['includeSubCarriers'] = ObjectSerializer::toQueryValue($includeSubCarriers, null);
        }
        // query params
        if ($includeProducts !== null) {
            $queryParams['includeProducts'] = ObjectSerializer::toQueryValue($includeProducts, null);
        }
        // query params
        if ($includeIcons !== null) {
            $queryParams['includeIcons'] = ObjectSerializer::toQueryValue($includeIcons, null);
        }
        // query params
        if ($includeServices !== null) {
            $queryParams['includeServices'] = ObjectSerializer::toQueryValue($includeServices, null);
        }
        // query params
        if ($includeGoodsTypes !== null) {
            $queryParams['includeGoodsTypes'] = ObjectSerializer::toQueryValue($includeGoodsTypes, null);
        }
        // query params
        if ($includeValidations !== null) {
            $queryParams['includeValidations'] = ObjectSerializer::toQueryValue($includeValidations, null);
        }
        // query params
        if ($carrierConcepID !== null) {
            $queryParams['carrierConcepID'] = ObjectSerializer::toQueryValue($carrierConcepID, 'int32');
        }

        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDBatchReportsBatchReportIDGet
     *
     * Get batch report
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchReportID Job ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDBatchReportsBatchReportIDGet($actorID, $batchReportID)
    {
        $this->shipServerActorIDBatchReportsBatchReportIDGetWithHttpInfo($actorID, $batchReportID);
    }

    /**
     * Operation shipServerActorIDBatchReportsBatchReportIDGetWithHttpInfo
     *
     * Get batch report
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchReportID Job ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDBatchReportsBatchReportIDGetWithHttpInfo($actorID, $batchReportID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDBatchReportsBatchReportIDGetRequest($actorID, $batchReportID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDBatchReportsBatchReportIDGetAsync
     *
     * Get batch report
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchReportID Job ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDBatchReportsBatchReportIDGetAsync($actorID, $batchReportID)
    {
        return $this->shipServerActorIDBatchReportsBatchReportIDGetAsyncWithHttpInfo($actorID, $batchReportID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDBatchReportsBatchReportIDGetAsyncWithHttpInfo
     *
     * Get batch report
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchReportID Job ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDBatchReportsBatchReportIDGetAsyncWithHttpInfo($actorID, $batchReportID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDBatchReportsBatchReportIDGetRequest($actorID, $batchReportID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDBatchReportsBatchReportIDGet'
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchReportID Job ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDBatchReportsBatchReportIDGetRequest($actorID, $batchReportID)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDBatchReportsBatchReportIDGet'
            );
        }
        // verify the required parameter 'batchReportID' is set
        if ($batchReportID === null || (is_array($batchReportID) && count($batchReportID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batchReportID when calling shipServerActorIDBatchReportsBatchReportIDGet'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/batchReports/{batchReportID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($batchReportID !== null) {
            $resourcePath = str_replace(
                '{' . 'batchReportID' . '}',
                ObjectSerializer::toPathValue($batchReportID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDBatchShipmentsBatchIDGet
     *
     * Get batch shipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchID Batch ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDBatchShipmentsBatchIDGet($actorID, $batchID)
    {
        $this->shipServerActorIDBatchShipmentsBatchIDGetWithHttpInfo($actorID, $batchID);
    }

    /**
     * Operation shipServerActorIDBatchShipmentsBatchIDGetWithHttpInfo
     *
     * Get batch shipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchID Batch ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDBatchShipmentsBatchIDGetWithHttpInfo($actorID, $batchID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDBatchShipmentsBatchIDGetRequest($actorID, $batchID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDBatchShipmentsBatchIDGetAsync
     *
     * Get batch shipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchID Batch ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDBatchShipmentsBatchIDGetAsync($actorID, $batchID)
    {
        return $this->shipServerActorIDBatchShipmentsBatchIDGetAsyncWithHttpInfo($actorID, $batchID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDBatchShipmentsBatchIDGetAsyncWithHttpInfo
     *
     * Get batch shipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchID Batch ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDBatchShipmentsBatchIDGetAsyncWithHttpInfo($actorID, $batchID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDBatchShipmentsBatchIDGetRequest($actorID, $batchID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDBatchShipmentsBatchIDGet'
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchID Batch ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDBatchShipmentsBatchIDGetRequest($actorID, $batchID)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDBatchShipmentsBatchIDGet'
            );
        }
        // verify the required parameter 'batchID' is set
        if ($batchID === null || (is_array($batchID) && count($batchID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batchID when calling shipServerActorIDBatchShipmentsBatchIDGet'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/batchShipments/{batchID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($batchID !== null) {
            $resourcePath = str_replace(
                '{' . 'batchID' . '}',
                ObjectSerializer::toPathValue($batchID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDBatchesBatchIDGet
     *
     * Get Batch Details
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchID Batch ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDBatchesBatchIDGet($actorID, $batchID)
    {
        $this->shipServerActorIDBatchesBatchIDGetWithHttpInfo($actorID, $batchID);
    }

    /**
     * Operation shipServerActorIDBatchesBatchIDGetWithHttpInfo
     *
     * Get Batch Details
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchID Batch ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDBatchesBatchIDGetWithHttpInfo($actorID, $batchID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDBatchesBatchIDGetRequest($actorID, $batchID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDBatchesBatchIDGetAsync
     *
     * Get Batch Details
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchID Batch ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDBatchesBatchIDGetAsync($actorID, $batchID)
    {
        return $this->shipServerActorIDBatchesBatchIDGetAsyncWithHttpInfo($actorID, $batchID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDBatchesBatchIDGetAsyncWithHttpInfo
     *
     * Get Batch Details
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchID Batch ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDBatchesBatchIDGetAsyncWithHttpInfo($actorID, $batchID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDBatchesBatchIDGetRequest($actorID, $batchID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDBatchesBatchIDGet'
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $batchID Batch ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDBatchesBatchIDGetRequest($actorID, $batchID)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDBatchesBatchIDGet'
            );
        }
        // verify the required parameter 'batchID' is set
        if ($batchID === null || (is_array($batchID) && count($batchID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $batchID when calling shipServerActorIDBatchesBatchIDGet'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/batches/{batchID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($batchID !== null) {
            $resourcePath = str_replace(
                '{' . 'batchID' . '}',
                ObjectSerializer::toPathValue($batchID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDBatchesPost
     *
     * Get Batch List
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;StartIndex&quot;:&quot;0&quot;, &quot;Count&quot;:5, &quot;SortField&quot;:&quot;TransmitDt&quot;, &quot;SortDirection&quot;:1}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDBatchesPost($actorID, $body = null)
    {
        $this->shipServerActorIDBatchesPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDBatchesPostWithHttpInfo
     *
     * Get Batch List
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;StartIndex&quot;:&quot;0&quot;, &quot;Count&quot;:5, &quot;SortField&quot;:&quot;TransmitDt&quot;, &quot;SortDirection&quot;:1}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDBatchesPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDBatchesPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDBatchesPostAsync
     *
     * Get Batch List
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;StartIndex&quot;:&quot;0&quot;, &quot;Count&quot;:5, &quot;SortField&quot;:&quot;TransmitDt&quot;, &quot;SortDirection&quot;:1}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDBatchesPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDBatchesPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDBatchesPostAsyncWithHttpInfo
     *
     * Get Batch List
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;StartIndex&quot;:&quot;0&quot;, &quot;Count&quot;:5, &quot;SortField&quot;:&quot;TransmitDt&quot;, &quot;SortDirection&quot;:1}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDBatchesPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDBatchesPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDBatchesPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;StartIndex&quot;:&quot;0&quot;, &quot;Count&quot;:5, &quot;SortField&quot;:&quot;TransmitDt&quot;, &quot;SortDirection&quot;:1}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDBatchesPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDBatchesPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/batches';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDCheckoutPost
     *
     * Get delivery optionswithout shipping rules defined
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;Price&quot;:&quot;1&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDCheckoutPost($actorID, $body = null)
    {
        $this->shipServerActorIDCheckoutPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDCheckoutPostWithHttpInfo
     *
     * Get delivery optionswithout shipping rules defined
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;Price&quot;:&quot;1&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDCheckoutPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDCheckoutPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDCheckoutPostAsync
     *
     * Get delivery optionswithout shipping rules defined
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;Price&quot;:&quot;1&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDCheckoutPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDCheckoutPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDCheckoutPostAsyncWithHttpInfo
     *
     * Get delivery optionswithout shipping rules defined
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;Price&quot;:&quot;1&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDCheckoutPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDCheckoutPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDCheckoutPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;Price&quot;:&quot;1&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDCheckoutPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDCheckoutPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/checkout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDDropPointIDsDropPointIDPost
     *
     * Get drop point by ID
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $dropPointID Drop Point ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 1041, &quot;Services&quot;: [ 142002 ], &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;sample&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;1400&quot;, &quot;City&quot;: &quot;city&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ] } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDDropPointIDsDropPointIDPost($actorID, $dropPointID, $body = null)
    {
        $this->shipServerActorIDDropPointIDsDropPointIDPostWithHttpInfo($actorID, $dropPointID, $body);
    }

    /**
     * Operation shipServerActorIDDropPointIDsDropPointIDPostWithHttpInfo
     *
     * Get drop point by ID
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $dropPointID Drop Point ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 1041, &quot;Services&quot;: [ 142002 ], &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;sample&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;1400&quot;, &quot;City&quot;: &quot;city&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ] } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDDropPointIDsDropPointIDPostWithHttpInfo($actorID, $dropPointID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDDropPointIDsDropPointIDPostRequest($actorID, $dropPointID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDDropPointIDsDropPointIDPostAsync
     *
     * Get drop point by ID
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $dropPointID Drop Point ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 1041, &quot;Services&quot;: [ 142002 ], &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;sample&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;1400&quot;, &quot;City&quot;: &quot;city&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ] } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDDropPointIDsDropPointIDPostAsync($actorID, $dropPointID, $body = null)
    {
        return $this->shipServerActorIDDropPointIDsDropPointIDPostAsyncWithHttpInfo($actorID, $dropPointID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDDropPointIDsDropPointIDPostAsyncWithHttpInfo
     *
     * Get drop point by ID
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $dropPointID Drop Point ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 1041, &quot;Services&quot;: [ 142002 ], &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;sample&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;1400&quot;, &quot;City&quot;: &quot;city&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ] } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDDropPointIDsDropPointIDPostAsyncWithHttpInfo($actorID, $dropPointID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDDropPointIDsDropPointIDPostRequest($actorID, $dropPointID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDDropPointIDsDropPointIDPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $dropPointID Drop Point ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 1041, &quot;Services&quot;: [ 142002 ], &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;sample&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;1400&quot;, &quot;City&quot;: &quot;city&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ] } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDDropPointIDsDropPointIDPostRequest($actorID, $dropPointID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDDropPointIDsDropPointIDPost'
            );
        }
        // verify the required parameter 'dropPointID' is set
        if ($dropPointID === null || (is_array($dropPointID) && count($dropPointID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dropPointID when calling shipServerActorIDDropPointIDsDropPointIDPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/dropPointIDs/{dropPointID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($dropPointID !== null) {
            $resourcePath = str_replace(
                '{' . 'dropPointID' . '}',
                ObjectSerializer::toPathValue($dropPointID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDDropPointsPost
     *
     * Get drop points
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 5748, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;1132nb&quot;, &quot;City&quot;: &quot;Volendam&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NL&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;24539&quot;, &quot;City&quot;: &quot;Neumünster&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;DE&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 2775, &quot;PkgWeight&quot;: 2775, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ], &quot;Services&quot;: [ 676008 ] }, &quot;options&quot;: { &quot;EarliestPickup&quot;: &quot;2021-06-16T06:00&quot;, &quot;LatestPickup&quot;: &quot;2021-06-16T21:00&quot;, &quot;TimeLog&quot;: 1 } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDDropPointsPost($actorID, $body = null)
    {
        $this->shipServerActorIDDropPointsPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDDropPointsPostWithHttpInfo
     *
     * Get drop points
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 5748, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;1132nb&quot;, &quot;City&quot;: &quot;Volendam&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NL&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;24539&quot;, &quot;City&quot;: &quot;Neumünster&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;DE&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 2775, &quot;PkgWeight&quot;: 2775, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ], &quot;Services&quot;: [ 676008 ] }, &quot;options&quot;: { &quot;EarliestPickup&quot;: &quot;2021-06-16T06:00&quot;, &quot;LatestPickup&quot;: &quot;2021-06-16T21:00&quot;, &quot;TimeLog&quot;: 1 } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDDropPointsPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDDropPointsPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDDropPointsPostAsync
     *
     * Get drop points
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 5748, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;1132nb&quot;, &quot;City&quot;: &quot;Volendam&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NL&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;24539&quot;, &quot;City&quot;: &quot;Neumünster&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;DE&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 2775, &quot;PkgWeight&quot;: 2775, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ], &quot;Services&quot;: [ 676008 ] }, &quot;options&quot;: { &quot;EarliestPickup&quot;: &quot;2021-06-16T06:00&quot;, &quot;LatestPickup&quot;: &quot;2021-06-16T21:00&quot;, &quot;TimeLog&quot;: 1 } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDDropPointsPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDDropPointsPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDDropPointsPostAsyncWithHttpInfo
     *
     * Get drop points
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 5748, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;1132nb&quot;, &quot;City&quot;: &quot;Volendam&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NL&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;24539&quot;, &quot;City&quot;: &quot;Neumünster&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;DE&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 2775, &quot;PkgWeight&quot;: 2775, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ], &quot;Services&quot;: [ 676008 ] }, &quot;options&quot;: { &quot;EarliestPickup&quot;: &quot;2021-06-16T06:00&quot;, &quot;LatestPickup&quot;: &quot;2021-06-16T21:00&quot;, &quot;TimeLog&quot;: 1 } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDDropPointsPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDDropPointsPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDDropPointsPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 5748, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;1132nb&quot;, &quot;City&quot;: &quot;Volendam&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NL&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;24539&quot;, &quot;City&quot;: &quot;Neumünster&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;DE&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 2775, &quot;PkgWeight&quot;: 2775, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ], &quot;Services&quot;: [ 676008 ] }, &quot;options&quot;: { &quot;EarliestPickup&quot;: &quot;2021-06-16T06:00&quot;, &quot;LatestPickup&quot;: &quot;2021-06-16T21:00&quot;, &quot;TimeLog&quot;: 1 } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDDropPointsPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDDropPointsPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/dropPoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDImportUploadPost
     *
     * Import Upload
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;filename&quot;: &quot;Import1.txt&quot;, &quot;filecontent&quot;: &quot;MTEzNjE7NzA0NzQ7TmFtZTs7OzAwMDAwMDAwO0hhbG1zdGFkO1NFO0s2ODM2NjA7OztQMTk7RElCUzs0NTQ7U0VLOzs7&quot;, &quot;importkeys&quot;: &quot;W10&#x3D;&quot;, &quot;version&quot;: &quot;0.0&quot; } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDImportUploadPost($actorID, $body = null)
    {
        $this->shipServerActorIDImportUploadPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDImportUploadPostWithHttpInfo
     *
     * Import Upload
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;filename&quot;: &quot;Import1.txt&quot;, &quot;filecontent&quot;: &quot;MTEzNjE7NzA0NzQ7TmFtZTs7OzAwMDAwMDAwO0hhbG1zdGFkO1NFO0s2ODM2NjA7OztQMTk7RElCUzs0NTQ7U0VLOzs7&quot;, &quot;importkeys&quot;: &quot;W10&#x3D;&quot;, &quot;version&quot;: &quot;0.0&quot; } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDImportUploadPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDImportUploadPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDImportUploadPostAsync
     *
     * Import Upload
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;filename&quot;: &quot;Import1.txt&quot;, &quot;filecontent&quot;: &quot;MTEzNjE7NzA0NzQ7TmFtZTs7OzAwMDAwMDAwO0hhbG1zdGFkO1NFO0s2ODM2NjA7OztQMTk7RElCUzs0NTQ7U0VLOzs7&quot;, &quot;importkeys&quot;: &quot;W10&#x3D;&quot;, &quot;version&quot;: &quot;0.0&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDImportUploadPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDImportUploadPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDImportUploadPostAsyncWithHttpInfo
     *
     * Import Upload
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;filename&quot;: &quot;Import1.txt&quot;, &quot;filecontent&quot;: &quot;MTEzNjE7NzA0NzQ7TmFtZTs7OzAwMDAwMDAwO0hhbG1zdGFkO1NFO0s2ODM2NjA7OztQMTk7RElCUzs0NTQ7U0VLOzs7&quot;, &quot;importkeys&quot;: &quot;W10&#x3D;&quot;, &quot;version&quot;: &quot;0.0&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDImportUploadPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDImportUploadPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDImportUploadPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;filename&quot;: &quot;Import1.txt&quot;, &quot;filecontent&quot;: &quot;MTEzNjE7NzA0NzQ7TmFtZTs7OzAwMDAwMDAwO0hhbG1zdGFkO1NFO0s2ODM2NjA7OztQMTk7RElCUzs0NTQ7U0VLOzs7&quot;, &quot;importkeys&quot;: &quot;W10&#x3D;&quot;, &quot;version&quot;: &quot;0.0&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDImportUploadPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDImportUploadPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/importUpload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDJobsJobIDGet
     *
     * Get job
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $jobID Job ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDJobsJobIDGet($actorID, $jobID)
    {
        $this->shipServerActorIDJobsJobIDGetWithHttpInfo($actorID, $jobID);
    }

    /**
     * Operation shipServerActorIDJobsJobIDGetWithHttpInfo
     *
     * Get job
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $jobID Job ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDJobsJobIDGetWithHttpInfo($actorID, $jobID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDJobsJobIDGetRequest($actorID, $jobID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDJobsJobIDGetAsync
     *
     * Get job
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $jobID Job ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDJobsJobIDGetAsync($actorID, $jobID)
    {
        return $this->shipServerActorIDJobsJobIDGetAsyncWithHttpInfo($actorID, $jobID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDJobsJobIDGetAsyncWithHttpInfo
     *
     * Get job
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $jobID Job ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDJobsJobIDGetAsyncWithHttpInfo($actorID, $jobID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDJobsJobIDGetRequest($actorID, $jobID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDJobsJobIDGet'
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $jobID Job ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDJobsJobIDGetRequest($actorID, $jobID)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDJobsJobIDGet'
            );
        }
        // verify the required parameter 'jobID' is set
        if ($jobID === null || (is_array($jobID) && count($jobID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jobID when calling shipServerActorIDJobsJobIDGet'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/jobs/{jobID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($jobID !== null) {
            $resourcePath = str_replace(
                '{' . 'jobID' . '}',
                ObjectSerializer::toPathValue($jobID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDOrderAdvicePost
     *
     * Creation of an order
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;OrderNo&quot;: &quot;772157949528&quot;, &quot;Lines&quot;: [ { &quot;Length&quot;: 150, &quot;Height&quot;: 100, &quot;PkgWeight&quot;: 130, &quot;Width&quot;: 100, &quot;PkgVol&quot;: 1500000, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1, &quot;PkgNo&quot;: &quot;&quot; } ] } ], &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0360&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;POPostCode&quot;: &quot;0580&quot;, &quot;POCity&quot;: &quot;OSLO&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;12341234&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;References&quot;: [ { &quot;Kind&quot;: 7, &quot;Value&quot;: &quot;ECOM12364313&quot; } ] }, &quot;options&quot;: { &quot;ServiceLevel&quot;: &quot;STANDARD&quot;, &quot;RequiredDeliveryDate&quot;: &quot;2021-10-25&quot;, &quot;UseShippingRules&quot;: &quot;1&quot;, &quot;ValidatePostCode&quot;: null, &quot;Visibility&quot;: &quot;extended&quot; } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDOrderAdvicePost($actorID, $body = null)
    {
        $this->shipServerActorIDOrderAdvicePostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDOrderAdvicePostWithHttpInfo
     *
     * Creation of an order
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;OrderNo&quot;: &quot;772157949528&quot;, &quot;Lines&quot;: [ { &quot;Length&quot;: 150, &quot;Height&quot;: 100, &quot;PkgWeight&quot;: 130, &quot;Width&quot;: 100, &quot;PkgVol&quot;: 1500000, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1, &quot;PkgNo&quot;: &quot;&quot; } ] } ], &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0360&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;POPostCode&quot;: &quot;0580&quot;, &quot;POCity&quot;: &quot;OSLO&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;12341234&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;References&quot;: [ { &quot;Kind&quot;: 7, &quot;Value&quot;: &quot;ECOM12364313&quot; } ] }, &quot;options&quot;: { &quot;ServiceLevel&quot;: &quot;STANDARD&quot;, &quot;RequiredDeliveryDate&quot;: &quot;2021-10-25&quot;, &quot;UseShippingRules&quot;: &quot;1&quot;, &quot;ValidatePostCode&quot;: null, &quot;Visibility&quot;: &quot;extended&quot; } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDOrderAdvicePostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDOrderAdvicePostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDOrderAdvicePostAsync
     *
     * Creation of an order
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;OrderNo&quot;: &quot;772157949528&quot;, &quot;Lines&quot;: [ { &quot;Length&quot;: 150, &quot;Height&quot;: 100, &quot;PkgWeight&quot;: 130, &quot;Width&quot;: 100, &quot;PkgVol&quot;: 1500000, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1, &quot;PkgNo&quot;: &quot;&quot; } ] } ], &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0360&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;POPostCode&quot;: &quot;0580&quot;, &quot;POCity&quot;: &quot;OSLO&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;12341234&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;References&quot;: [ { &quot;Kind&quot;: 7, &quot;Value&quot;: &quot;ECOM12364313&quot; } ] }, &quot;options&quot;: { &quot;ServiceLevel&quot;: &quot;STANDARD&quot;, &quot;RequiredDeliveryDate&quot;: &quot;2021-10-25&quot;, &quot;UseShippingRules&quot;: &quot;1&quot;, &quot;ValidatePostCode&quot;: null, &quot;Visibility&quot;: &quot;extended&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDOrderAdvicePostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDOrderAdvicePostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDOrderAdvicePostAsyncWithHttpInfo
     *
     * Creation of an order
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;OrderNo&quot;: &quot;772157949528&quot;, &quot;Lines&quot;: [ { &quot;Length&quot;: 150, &quot;Height&quot;: 100, &quot;PkgWeight&quot;: 130, &quot;Width&quot;: 100, &quot;PkgVol&quot;: 1500000, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1, &quot;PkgNo&quot;: &quot;&quot; } ] } ], &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0360&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;POPostCode&quot;: &quot;0580&quot;, &quot;POCity&quot;: &quot;OSLO&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;12341234&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;References&quot;: [ { &quot;Kind&quot;: 7, &quot;Value&quot;: &quot;ECOM12364313&quot; } ] }, &quot;options&quot;: { &quot;ServiceLevel&quot;: &quot;STANDARD&quot;, &quot;RequiredDeliveryDate&quot;: &quot;2021-10-25&quot;, &quot;UseShippingRules&quot;: &quot;1&quot;, &quot;ValidatePostCode&quot;: null, &quot;Visibility&quot;: &quot;extended&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDOrderAdvicePostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDOrderAdvicePostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDOrderAdvicePost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;OrderNo&quot;: &quot;772157949528&quot;, &quot;Lines&quot;: [ { &quot;Length&quot;: 150, &quot;Height&quot;: 100, &quot;PkgWeight&quot;: 130, &quot;Width&quot;: 100, &quot;PkgVol&quot;: 1500000, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1, &quot;PkgNo&quot;: &quot;&quot; } ] } ], &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0360&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;POPostCode&quot;: &quot;0580&quot;, &quot;POCity&quot;: &quot;OSLO&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Mobile&quot;: &quot;12341234&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;References&quot;: [ { &quot;Kind&quot;: 7, &quot;Value&quot;: &quot;ECOM12364313&quot; } ] }, &quot;options&quot;: { &quot;ServiceLevel&quot;: &quot;STANDARD&quot;, &quot;RequiredDeliveryDate&quot;: &quot;2021-10-25&quot;, &quot;UseShippingRules&quot;: &quot;1&quot;, &quot;ValidatePostCode&quot;: null, &quot;Visibility&quot;: &quot;extended&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDOrderAdvicePostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDOrderAdvicePost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/orderAdvice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDOrdersPost
     *
     * Store order
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:1,&quot;OrderNo&quot;:19576,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Leveranser AB&quot;,&quot;Street1&quot;:&quot;Test Street 1&quot;,&quot;PostCode&quot;:&quot;24542&quot;,&quot;City&quot;:&quot;Staffanstorp&quot;,&quot;Phone&quot;:&quot;00000000&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Attention&quot;:&quot;TEST&quot;,&quot;CountryCode&quot;:&quot;SE&quot;},{&quot;Kind&quot;:2,&quot;Name1&quot;:&quot;Consignor AB&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;22350&quot;,&quot;City&quot;:&quot;Lund&quot;,&quot;Phone&quot;:&quot;046-123456&quot;,&quot;Mobile&quot;:&quot;046-123456&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Attention&quot;: &quot;Kundtjänst&quot;,&quot;CountryCode&quot;:&quot;SE&quot;},{&quot;Kind&quot;:10,&quot;CustNo&quot;:&quot;&quot;}],&quot;Amounts&quot;:[{&quot;Kind&quot;:10,&quot;CurrencyCode&quot;:3,&quot;Value&quot;:&quot;&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:2000,&quot;Height&quot;:&quot;150&quot;,&quot;Length&quot;:&quot;150&quot;,&quot;Width&quot;:&quot;150&quot;,&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;&quot;}],&quot;PkgVol&quot;:0,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;OrderID&quot;:&quot;12345&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDOrdersPost($actorID, $body = null)
    {
        $this->shipServerActorIDOrdersPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDOrdersPostWithHttpInfo
     *
     * Store order
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:1,&quot;OrderNo&quot;:19576,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Leveranser AB&quot;,&quot;Street1&quot;:&quot;Test Street 1&quot;,&quot;PostCode&quot;:&quot;24542&quot;,&quot;City&quot;:&quot;Staffanstorp&quot;,&quot;Phone&quot;:&quot;00000000&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Attention&quot;:&quot;TEST&quot;,&quot;CountryCode&quot;:&quot;SE&quot;},{&quot;Kind&quot;:2,&quot;Name1&quot;:&quot;Consignor AB&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;22350&quot;,&quot;City&quot;:&quot;Lund&quot;,&quot;Phone&quot;:&quot;046-123456&quot;,&quot;Mobile&quot;:&quot;046-123456&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Attention&quot;: &quot;Kundtjänst&quot;,&quot;CountryCode&quot;:&quot;SE&quot;},{&quot;Kind&quot;:10,&quot;CustNo&quot;:&quot;&quot;}],&quot;Amounts&quot;:[{&quot;Kind&quot;:10,&quot;CurrencyCode&quot;:3,&quot;Value&quot;:&quot;&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:2000,&quot;Height&quot;:&quot;150&quot;,&quot;Length&quot;:&quot;150&quot;,&quot;Width&quot;:&quot;150&quot;,&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;&quot;}],&quot;PkgVol&quot;:0,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;OrderID&quot;:&quot;12345&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDOrdersPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDOrdersPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDOrdersPostAsync
     *
     * Store order
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:1,&quot;OrderNo&quot;:19576,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Leveranser AB&quot;,&quot;Street1&quot;:&quot;Test Street 1&quot;,&quot;PostCode&quot;:&quot;24542&quot;,&quot;City&quot;:&quot;Staffanstorp&quot;,&quot;Phone&quot;:&quot;00000000&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Attention&quot;:&quot;TEST&quot;,&quot;CountryCode&quot;:&quot;SE&quot;},{&quot;Kind&quot;:2,&quot;Name1&quot;:&quot;Consignor AB&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;22350&quot;,&quot;City&quot;:&quot;Lund&quot;,&quot;Phone&quot;:&quot;046-123456&quot;,&quot;Mobile&quot;:&quot;046-123456&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Attention&quot;: &quot;Kundtjänst&quot;,&quot;CountryCode&quot;:&quot;SE&quot;},{&quot;Kind&quot;:10,&quot;CustNo&quot;:&quot;&quot;}],&quot;Amounts&quot;:[{&quot;Kind&quot;:10,&quot;CurrencyCode&quot;:3,&quot;Value&quot;:&quot;&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:2000,&quot;Height&quot;:&quot;150&quot;,&quot;Length&quot;:&quot;150&quot;,&quot;Width&quot;:&quot;150&quot;,&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;&quot;}],&quot;PkgVol&quot;:0,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;OrderID&quot;:&quot;12345&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDOrdersPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDOrdersPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDOrdersPostAsyncWithHttpInfo
     *
     * Store order
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:1,&quot;OrderNo&quot;:19576,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Leveranser AB&quot;,&quot;Street1&quot;:&quot;Test Street 1&quot;,&quot;PostCode&quot;:&quot;24542&quot;,&quot;City&quot;:&quot;Staffanstorp&quot;,&quot;Phone&quot;:&quot;00000000&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Attention&quot;:&quot;TEST&quot;,&quot;CountryCode&quot;:&quot;SE&quot;},{&quot;Kind&quot;:2,&quot;Name1&quot;:&quot;Consignor AB&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;22350&quot;,&quot;City&quot;:&quot;Lund&quot;,&quot;Phone&quot;:&quot;046-123456&quot;,&quot;Mobile&quot;:&quot;046-123456&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Attention&quot;: &quot;Kundtjänst&quot;,&quot;CountryCode&quot;:&quot;SE&quot;},{&quot;Kind&quot;:10,&quot;CustNo&quot;:&quot;&quot;}],&quot;Amounts&quot;:[{&quot;Kind&quot;:10,&quot;CurrencyCode&quot;:3,&quot;Value&quot;:&quot;&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:2000,&quot;Height&quot;:&quot;150&quot;,&quot;Length&quot;:&quot;150&quot;,&quot;Width&quot;:&quot;150&quot;,&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;&quot;}],&quot;PkgVol&quot;:0,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;OrderID&quot;:&quot;12345&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDOrdersPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDOrdersPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDOrdersPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:1,&quot;OrderNo&quot;:19576,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Leveranser AB&quot;,&quot;Street1&quot;:&quot;Test Street 1&quot;,&quot;PostCode&quot;:&quot;24542&quot;,&quot;City&quot;:&quot;Staffanstorp&quot;,&quot;Phone&quot;:&quot;00000000&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Attention&quot;:&quot;TEST&quot;,&quot;CountryCode&quot;:&quot;SE&quot;},{&quot;Kind&quot;:2,&quot;Name1&quot;:&quot;Consignor AB&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;22350&quot;,&quot;City&quot;:&quot;Lund&quot;,&quot;Phone&quot;:&quot;046-123456&quot;,&quot;Mobile&quot;:&quot;046-123456&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Attention&quot;: &quot;Kundtjänst&quot;,&quot;CountryCode&quot;:&quot;SE&quot;},{&quot;Kind&quot;:10,&quot;CustNo&quot;:&quot;&quot;}],&quot;Amounts&quot;:[{&quot;Kind&quot;:10,&quot;CurrencyCode&quot;:3,&quot;Value&quot;:&quot;&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:2000,&quot;Height&quot;:&quot;150&quot;,&quot;Length&quot;:&quot;150&quot;,&quot;Width&quot;:&quot;150&quot;,&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;&quot;}],&quot;PkgVol&quot;:0,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;OrderID&quot;:&quot;12345&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDOrdersPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDOrdersPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDPackagesManifestPut
     *
     * Transmit/manifest packages
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PUT:  {&quot;data&quot;:{&quot;PackageCSIDs&quot;:[4566,4585]},&quot;options&quot;:{}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDPackagesManifestPut($actorID, $body = null)
    {
        $this->shipServerActorIDPackagesManifestPutWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDPackagesManifestPutWithHttpInfo
     *
     * Transmit/manifest packages
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PUT:  {&quot;data&quot;:{&quot;PackageCSIDs&quot;:[4566,4585]},&quot;options&quot;:{}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDPackagesManifestPutWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDPackagesManifestPutRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDPackagesManifestPutAsync
     *
     * Transmit/manifest packages
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PUT:  {&quot;data&quot;:{&quot;PackageCSIDs&quot;:[4566,4585]},&quot;options&quot;:{}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDPackagesManifestPutAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDPackagesManifestPutAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDPackagesManifestPutAsyncWithHttpInfo
     *
     * Transmit/manifest packages
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PUT:  {&quot;data&quot;:{&quot;PackageCSIDs&quot;:[4566,4585]},&quot;options&quot;:{}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDPackagesManifestPutAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDPackagesManifestPutRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDPackagesManifestPut'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PUT:  {&quot;data&quot;:{&quot;PackageCSIDs&quot;:[4566,4585]},&quot;options&quot;:{}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDPackagesManifestPutRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDPackagesManifestPut'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/packages/manifest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDPickupLockerAllocationsPost
     *
     * Pickup Locker Allocations
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;ProdConceptID&quot;: 7358, &quot;AgentNo&quot;: &quot;1344&quot;, &quot;Addresses&quot;: [{&quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Test Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;CustNo&quot;: &quot;5&quot;, &quot;Mobile&quot;: &quot;+4411223344&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;Country&quot;: &quot;Sweden&quot;, &quot;ERPRef&quot;: &quot;5&quot;}, {&quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Sender Test&quot;, &quot;Street1&quot;: &quot;Lisebergsvägen 2&quot;, &quot;PostCode&quot;: &quot;43891&quot;, &quot;Mobile&quot;: &quot;99887766&quot;, &quot;City&quot;: &quot;Landvetter&quot;, &quot;CustNo&quot;: &quot;3425964&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Country&quot;: &quot;Sweden&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;}], &quot;References&quot;: [{&quot;Kind&quot;: 108, &quot;Value&quot;: &quot;2021-10-15T00:00:00&quot;}, {&quot;Kind&quot;: 109, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot;}, {&quot;Kind&quot;: 110, &quot;Value&quot;: &quot;2021-10-15T00:01:00&quot;}, {&quot;Kind&quot;: 111, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot;}, {&quot;Kind&quot;: 140, &quot;Value&quot;: &quot;a@b.c&quot;}], &quot;Lines&quot;: [{&quot;LineWeight&quot;: 4000, &quot;PkgWeight&quot;: 4000, &quot;Width&quot;: 10, &quot;Height&quot;: 400, &quot;Length&quot;: 10, &quot;Pkgs&quot;: [{&quot;ItemNo&quot;: 3}], &quot;References&quot;: [{&quot;Kind&quot;: 23, &quot;Value&quot;: &quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;PickupLockerToken&quot;:&quot;ZXlKemIzSjBYMk52WkdVaU9pSkpUalVpTENKaGRtRnBiR0ZpYVd4cGRIbGZkRzlyWlc0aU9pSmlNekU1T1RkbFlTMDRPVFZoTFRSbFpqY3RPR1ZtWkMwek5XVTRNak5oWkdVNFlXSWlmUT09O0lONTtULU1hcmlhdG9yZ2V0IChTd2VkZW5ib3Jnc2cpIFByZXNzYnlyw6VuIChpbW9yZ29uIH4xNjowMCk7O1dvbGxtYXIgWXhrdWxsc2dhdGFuIDg7V29sbG1hciBZeGt1bGxzZ2F0YW4gODsxMTg1MDtTdG9ja2hvbG07O1NFOzs7&quot;, &quot;TimeLog&quot;: 1,&quot;Token&quot;:&quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDPickupLockerAllocationsPost($actorID, $body = null)
    {
        $this->shipServerActorIDPickupLockerAllocationsPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDPickupLockerAllocationsPostWithHttpInfo
     *
     * Pickup Locker Allocations
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;ProdConceptID&quot;: 7358, &quot;AgentNo&quot;: &quot;1344&quot;, &quot;Addresses&quot;: [{&quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Test Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;CustNo&quot;: &quot;5&quot;, &quot;Mobile&quot;: &quot;+4411223344&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;Country&quot;: &quot;Sweden&quot;, &quot;ERPRef&quot;: &quot;5&quot;}, {&quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Sender Test&quot;, &quot;Street1&quot;: &quot;Lisebergsvägen 2&quot;, &quot;PostCode&quot;: &quot;43891&quot;, &quot;Mobile&quot;: &quot;99887766&quot;, &quot;City&quot;: &quot;Landvetter&quot;, &quot;CustNo&quot;: &quot;3425964&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Country&quot;: &quot;Sweden&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;}], &quot;References&quot;: [{&quot;Kind&quot;: 108, &quot;Value&quot;: &quot;2021-10-15T00:00:00&quot;}, {&quot;Kind&quot;: 109, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot;}, {&quot;Kind&quot;: 110, &quot;Value&quot;: &quot;2021-10-15T00:01:00&quot;}, {&quot;Kind&quot;: 111, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot;}, {&quot;Kind&quot;: 140, &quot;Value&quot;: &quot;a@b.c&quot;}], &quot;Lines&quot;: [{&quot;LineWeight&quot;: 4000, &quot;PkgWeight&quot;: 4000, &quot;Width&quot;: 10, &quot;Height&quot;: 400, &quot;Length&quot;: 10, &quot;Pkgs&quot;: [{&quot;ItemNo&quot;: 3}], &quot;References&quot;: [{&quot;Kind&quot;: 23, &quot;Value&quot;: &quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;PickupLockerToken&quot;:&quot;ZXlKemIzSjBYMk52WkdVaU9pSkpUalVpTENKaGRtRnBiR0ZpYVd4cGRIbGZkRzlyWlc0aU9pSmlNekU1T1RkbFlTMDRPVFZoTFRSbFpqY3RPR1ZtWkMwek5XVTRNak5oWkdVNFlXSWlmUT09O0lONTtULU1hcmlhdG9yZ2V0IChTd2VkZW5ib3Jnc2cpIFByZXNzYnlyw6VuIChpbW9yZ29uIH4xNjowMCk7O1dvbGxtYXIgWXhrdWxsc2dhdGFuIDg7V29sbG1hciBZeGt1bGxzZ2F0YW4gODsxMTg1MDtTdG9ja2hvbG07O1NFOzs7&quot;, &quot;TimeLog&quot;: 1,&quot;Token&quot;:&quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDPickupLockerAllocationsPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDPickupLockerAllocationsPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDPickupLockerAllocationsPostAsync
     *
     * Pickup Locker Allocations
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;ProdConceptID&quot;: 7358, &quot;AgentNo&quot;: &quot;1344&quot;, &quot;Addresses&quot;: [{&quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Test Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;CustNo&quot;: &quot;5&quot;, &quot;Mobile&quot;: &quot;+4411223344&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;Country&quot;: &quot;Sweden&quot;, &quot;ERPRef&quot;: &quot;5&quot;}, {&quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Sender Test&quot;, &quot;Street1&quot;: &quot;Lisebergsvägen 2&quot;, &quot;PostCode&quot;: &quot;43891&quot;, &quot;Mobile&quot;: &quot;99887766&quot;, &quot;City&quot;: &quot;Landvetter&quot;, &quot;CustNo&quot;: &quot;3425964&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Country&quot;: &quot;Sweden&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;}], &quot;References&quot;: [{&quot;Kind&quot;: 108, &quot;Value&quot;: &quot;2021-10-15T00:00:00&quot;}, {&quot;Kind&quot;: 109, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot;}, {&quot;Kind&quot;: 110, &quot;Value&quot;: &quot;2021-10-15T00:01:00&quot;}, {&quot;Kind&quot;: 111, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot;}, {&quot;Kind&quot;: 140, &quot;Value&quot;: &quot;a@b.c&quot;}], &quot;Lines&quot;: [{&quot;LineWeight&quot;: 4000, &quot;PkgWeight&quot;: 4000, &quot;Width&quot;: 10, &quot;Height&quot;: 400, &quot;Length&quot;: 10, &quot;Pkgs&quot;: [{&quot;ItemNo&quot;: 3}], &quot;References&quot;: [{&quot;Kind&quot;: 23, &quot;Value&quot;: &quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;PickupLockerToken&quot;:&quot;ZXlKemIzSjBYMk52WkdVaU9pSkpUalVpTENKaGRtRnBiR0ZpYVd4cGRIbGZkRzlyWlc0aU9pSmlNekU1T1RkbFlTMDRPVFZoTFRSbFpqY3RPR1ZtWkMwek5XVTRNak5oWkdVNFlXSWlmUT09O0lONTtULU1hcmlhdG9yZ2V0IChTd2VkZW5ib3Jnc2cpIFByZXNzYnlyw6VuIChpbW9yZ29uIH4xNjowMCk7O1dvbGxtYXIgWXhrdWxsc2dhdGFuIDg7V29sbG1hciBZeGt1bGxzZ2F0YW4gODsxMTg1MDtTdG9ja2hvbG07O1NFOzs7&quot;, &quot;TimeLog&quot;: 1,&quot;Token&quot;:&quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDPickupLockerAllocationsPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDPickupLockerAllocationsPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDPickupLockerAllocationsPostAsyncWithHttpInfo
     *
     * Pickup Locker Allocations
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;ProdConceptID&quot;: 7358, &quot;AgentNo&quot;: &quot;1344&quot;, &quot;Addresses&quot;: [{&quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Test Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;CustNo&quot;: &quot;5&quot;, &quot;Mobile&quot;: &quot;+4411223344&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;Country&quot;: &quot;Sweden&quot;, &quot;ERPRef&quot;: &quot;5&quot;}, {&quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Sender Test&quot;, &quot;Street1&quot;: &quot;Lisebergsvägen 2&quot;, &quot;PostCode&quot;: &quot;43891&quot;, &quot;Mobile&quot;: &quot;99887766&quot;, &quot;City&quot;: &quot;Landvetter&quot;, &quot;CustNo&quot;: &quot;3425964&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Country&quot;: &quot;Sweden&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;}], &quot;References&quot;: [{&quot;Kind&quot;: 108, &quot;Value&quot;: &quot;2021-10-15T00:00:00&quot;}, {&quot;Kind&quot;: 109, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot;}, {&quot;Kind&quot;: 110, &quot;Value&quot;: &quot;2021-10-15T00:01:00&quot;}, {&quot;Kind&quot;: 111, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot;}, {&quot;Kind&quot;: 140, &quot;Value&quot;: &quot;a@b.c&quot;}], &quot;Lines&quot;: [{&quot;LineWeight&quot;: 4000, &quot;PkgWeight&quot;: 4000, &quot;Width&quot;: 10, &quot;Height&quot;: 400, &quot;Length&quot;: 10, &quot;Pkgs&quot;: [{&quot;ItemNo&quot;: 3}], &quot;References&quot;: [{&quot;Kind&quot;: 23, &quot;Value&quot;: &quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;PickupLockerToken&quot;:&quot;ZXlKemIzSjBYMk52WkdVaU9pSkpUalVpTENKaGRtRnBiR0ZpYVd4cGRIbGZkRzlyWlc0aU9pSmlNekU1T1RkbFlTMDRPVFZoTFRSbFpqY3RPR1ZtWkMwek5XVTRNak5oWkdVNFlXSWlmUT09O0lONTtULU1hcmlhdG9yZ2V0IChTd2VkZW5ib3Jnc2cpIFByZXNzYnlyw6VuIChpbW9yZ29uIH4xNjowMCk7O1dvbGxtYXIgWXhrdWxsc2dhdGFuIDg7V29sbG1hciBZeGt1bGxzZ2F0YW4gODsxMTg1MDtTdG9ja2hvbG07O1NFOzs7&quot;, &quot;TimeLog&quot;: 1,&quot;Token&quot;:&quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDPickupLockerAllocationsPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDPickupLockerAllocationsPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDPickupLockerAllocationsPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;ProdConceptID&quot;: 7358, &quot;AgentNo&quot;: &quot;1344&quot;, &quot;Addresses&quot;: [{&quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Test Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;CustNo&quot;: &quot;5&quot;, &quot;Mobile&quot;: &quot;+4411223344&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;Country&quot;: &quot;Sweden&quot;, &quot;ERPRef&quot;: &quot;5&quot;}, {&quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Sender Test&quot;, &quot;Street1&quot;: &quot;Lisebergsvägen 2&quot;, &quot;PostCode&quot;: &quot;43891&quot;, &quot;Mobile&quot;: &quot;99887766&quot;, &quot;City&quot;: &quot;Landvetter&quot;, &quot;CustNo&quot;: &quot;3425964&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Country&quot;: &quot;Sweden&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;}], &quot;References&quot;: [{&quot;Kind&quot;: 108, &quot;Value&quot;: &quot;2021-10-15T00:00:00&quot;}, {&quot;Kind&quot;: 109, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot;}, {&quot;Kind&quot;: 110, &quot;Value&quot;: &quot;2021-10-15T00:01:00&quot;}, {&quot;Kind&quot;: 111, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot;}, {&quot;Kind&quot;: 140, &quot;Value&quot;: &quot;a@b.c&quot;}], &quot;Lines&quot;: [{&quot;LineWeight&quot;: 4000, &quot;PkgWeight&quot;: 4000, &quot;Width&quot;: 10, &quot;Height&quot;: 400, &quot;Length&quot;: 10, &quot;Pkgs&quot;: [{&quot;ItemNo&quot;: 3}], &quot;References&quot;: [{&quot;Kind&quot;: 23, &quot;Value&quot;: &quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;PickupLockerToken&quot;:&quot;ZXlKemIzSjBYMk52WkdVaU9pSkpUalVpTENKaGRtRnBiR0ZpYVd4cGRIbGZkRzlyWlc0aU9pSmlNekU1T1RkbFlTMDRPVFZoTFRSbFpqY3RPR1ZtWkMwek5XVTRNak5oWkdVNFlXSWlmUT09O0lONTtULU1hcmlhdG9yZ2V0IChTd2VkZW5ib3Jnc2cpIFByZXNzYnlyw6VuIChpbW9yZ29uIH4xNjowMCk7O1dvbGxtYXIgWXhrdWxsc2dhdGFuIDg7V29sbG1hciBZeGt1bGxzZ2F0YW4gODsxMTg1MDtTdG9ja2hvbG07O1NFOzs7&quot;, &quot;TimeLog&quot;: 1,&quot;Token&quot;:&quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDPickupLockerAllocationsPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDPickupLockerAllocationsPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/pickupLockerAllocations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDPickupLockersPost
     *
     * Get pickup lockers
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;ProdConceptID&quot;: 7358, &quot;AgentNo&quot;: &quot;1344&quot;, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Test Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Sender Test&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;43891&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;City&quot;: &quot;Landvetter&quot;, &quot;CustNo&quot;: &quot;3425964&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; } ], &quot;References&quot;: [ { &quot;Kind&quot;: 108, &quot;Value&quot;: &quot;2021-10-15T00:00:00&quot; }, { &quot;Kind&quot;: 109, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot; }, { &quot;Kind&quot;: 110, &quot;Value&quot;: &quot;2021-10-15T00:01:00&quot; }, { &quot;Kind&quot;: 111, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot; }, { &quot;Kind&quot;: 140, &quot;Value&quot;: &quot;a@b.c&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 4000, &quot;PkgWeight&quot;: 4000, &quot;Width&quot;: 10, &quot;Height&quot;: 400, &quot;Length&quot;: 10, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 3 } ], &quot;References&quot;: [ { &quot;Kind&quot;: 23, &quot;Value&quot;: &quot;cool stuff&quot; } ] } ] }, &quot;options&quot;: { &quot;TimeLog&quot;: 1, &quot;Token&quot;: &quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot; } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDPickupLockersPost($actorID, $body = null)
    {
        $this->shipServerActorIDPickupLockersPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDPickupLockersPostWithHttpInfo
     *
     * Get pickup lockers
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;ProdConceptID&quot;: 7358, &quot;AgentNo&quot;: &quot;1344&quot;, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Test Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Sender Test&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;43891&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;City&quot;: &quot;Landvetter&quot;, &quot;CustNo&quot;: &quot;3425964&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; } ], &quot;References&quot;: [ { &quot;Kind&quot;: 108, &quot;Value&quot;: &quot;2021-10-15T00:00:00&quot; }, { &quot;Kind&quot;: 109, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot; }, { &quot;Kind&quot;: 110, &quot;Value&quot;: &quot;2021-10-15T00:01:00&quot; }, { &quot;Kind&quot;: 111, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot; }, { &quot;Kind&quot;: 140, &quot;Value&quot;: &quot;a@b.c&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 4000, &quot;PkgWeight&quot;: 4000, &quot;Width&quot;: 10, &quot;Height&quot;: 400, &quot;Length&quot;: 10, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 3 } ], &quot;References&quot;: [ { &quot;Kind&quot;: 23, &quot;Value&quot;: &quot;cool stuff&quot; } ] } ] }, &quot;options&quot;: { &quot;TimeLog&quot;: 1, &quot;Token&quot;: &quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot; } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDPickupLockersPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDPickupLockersPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDPickupLockersPostAsync
     *
     * Get pickup lockers
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;ProdConceptID&quot;: 7358, &quot;AgentNo&quot;: &quot;1344&quot;, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Test Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Sender Test&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;43891&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;City&quot;: &quot;Landvetter&quot;, &quot;CustNo&quot;: &quot;3425964&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; } ], &quot;References&quot;: [ { &quot;Kind&quot;: 108, &quot;Value&quot;: &quot;2021-10-15T00:00:00&quot; }, { &quot;Kind&quot;: 109, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot; }, { &quot;Kind&quot;: 110, &quot;Value&quot;: &quot;2021-10-15T00:01:00&quot; }, { &quot;Kind&quot;: 111, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot; }, { &quot;Kind&quot;: 140, &quot;Value&quot;: &quot;a@b.c&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 4000, &quot;PkgWeight&quot;: 4000, &quot;Width&quot;: 10, &quot;Height&quot;: 400, &quot;Length&quot;: 10, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 3 } ], &quot;References&quot;: [ { &quot;Kind&quot;: 23, &quot;Value&quot;: &quot;cool stuff&quot; } ] } ] }, &quot;options&quot;: { &quot;TimeLog&quot;: 1, &quot;Token&quot;: &quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDPickupLockersPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDPickupLockersPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDPickupLockersPostAsyncWithHttpInfo
     *
     * Get pickup lockers
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;ProdConceptID&quot;: 7358, &quot;AgentNo&quot;: &quot;1344&quot;, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Test Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Sender Test&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;43891&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;City&quot;: &quot;Landvetter&quot;, &quot;CustNo&quot;: &quot;3425964&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; } ], &quot;References&quot;: [ { &quot;Kind&quot;: 108, &quot;Value&quot;: &quot;2021-10-15T00:00:00&quot; }, { &quot;Kind&quot;: 109, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot; }, { &quot;Kind&quot;: 110, &quot;Value&quot;: &quot;2021-10-15T00:01:00&quot; }, { &quot;Kind&quot;: 111, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot; }, { &quot;Kind&quot;: 140, &quot;Value&quot;: &quot;a@b.c&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 4000, &quot;PkgWeight&quot;: 4000, &quot;Width&quot;: 10, &quot;Height&quot;: 400, &quot;Length&quot;: 10, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 3 } ], &quot;References&quot;: [ { &quot;Kind&quot;: 23, &quot;Value&quot;: &quot;cool stuff&quot; } ] } ] }, &quot;options&quot;: { &quot;TimeLog&quot;: 1, &quot;Token&quot;: &quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDPickupLockersPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDPickupLockersPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDPickupLockersPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;ProdConceptID&quot;: 7358, &quot;AgentNo&quot;: &quot;1344&quot;, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Test Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Sender Test&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;43891&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;City&quot;: &quot;Landvetter&quot;, &quot;CustNo&quot;: &quot;3425964&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; } ], &quot;References&quot;: [ { &quot;Kind&quot;: 108, &quot;Value&quot;: &quot;2021-10-15T00:00:00&quot; }, { &quot;Kind&quot;: 109, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot; }, { &quot;Kind&quot;: 110, &quot;Value&quot;: &quot;2021-10-15T00:01:00&quot; }, { &quot;Kind&quot;: 111, &quot;Value&quot;: &quot;2021-10-15T00:22:00&quot; }, { &quot;Kind&quot;: 140, &quot;Value&quot;: &quot;a@b.c&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 4000, &quot;PkgWeight&quot;: 4000, &quot;Width&quot;: 10, &quot;Height&quot;: 400, &quot;Length&quot;: 10, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 3 } ], &quot;References&quot;: [ { &quot;Kind&quot;: 23, &quot;Value&quot;: &quot;cool stuff&quot; } ] } ] }, &quot;options&quot;: { &quot;TimeLog&quot;: 1, &quot;Token&quot;: &quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDPickupLockersPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDPickupLockersPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/pickupLockers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDProductsGet
     *
     * Get Products
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDProductsGet($actorID)
    {
        $this->shipServerActorIDProductsGetWithHttpInfo($actorID);
    }

    /**
     * Operation shipServerActorIDProductsGetWithHttpInfo
     *
     * Get Products
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDProductsGetWithHttpInfo($actorID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDProductsGetRequest($actorID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDProductsGetAsync
     *
     * Get Products
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDProductsGetAsync($actorID)
    {
        return $this->shipServerActorIDProductsGetAsyncWithHttpInfo($actorID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDProductsGetAsyncWithHttpInfo
     *
     * Get Products
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDProductsGetAsyncWithHttpInfo($actorID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDProductsGetRequest($actorID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDProductsGet'
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDProductsGetRequest($actorID)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDProductsGet'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDSaveShipmentPost
     *
     * Save shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;CustNo&quot;: &quot;5&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;Country&quot;: &quot;Sweden&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 500, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ] }, &quot;options&quot;: { } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDSaveShipmentPost($actorID, $body = null)
    {
        $this->shipServerActorIDSaveShipmentPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDSaveShipmentPostWithHttpInfo
     *
     * Save shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;CustNo&quot;: &quot;5&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;Country&quot;: &quot;Sweden&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 500, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ] }, &quot;options&quot;: { } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDSaveShipmentPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDSaveShipmentPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDSaveShipmentPostAsync
     *
     * Save shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;CustNo&quot;: &quot;5&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;Country&quot;: &quot;Sweden&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 500, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ] }, &quot;options&quot;: { } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDSaveShipmentPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDSaveShipmentPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDSaveShipmentPostAsyncWithHttpInfo
     *
     * Save shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;CustNo&quot;: &quot;5&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;Country&quot;: &quot;Sweden&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 500, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ] }, &quot;options&quot;: { } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDSaveShipmentPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDSaveShipmentPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDSaveShipmentPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;CustNo&quot;: &quot;5&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;Country&quot;: &quot;Sweden&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 500, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ] }, &quot;options&quot;: { } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDSaveShipmentPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDSaveShipmentPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/saveShipment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDSenderAddressGet
     *
     * Get Sender Address
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDSenderAddressGet($actorID)
    {
        $this->shipServerActorIDSenderAddressGetWithHttpInfo($actorID);
    }

    /**
     * Operation shipServerActorIDSenderAddressGetWithHttpInfo
     *
     * Get Sender Address
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDSenderAddressGetWithHttpInfo($actorID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDSenderAddressGetRequest($actorID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDSenderAddressGetAsync
     *
     * Get Sender Address
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDSenderAddressGetAsync($actorID)
    {
        return $this->shipServerActorIDSenderAddressGetAsyncWithHttpInfo($actorID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDSenderAddressGetAsyncWithHttpInfo
     *
     * Get Sender Address
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDSenderAddressGetAsyncWithHttpInfo($actorID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDSenderAddressGetRequest($actorID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDSenderAddressGet'
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDSenderAddressGetRequest($actorID)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDSenderAddressGet'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/senderAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipAdvisesPost
     *
     * Get delivery options
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;ServiceLevel&quot;:&quot;test&quot;,&quot;Price&quot;:&quot;1&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipAdvisesPost($actorID, $body = null)
    {
        $this->shipServerActorIDShipAdvisesPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDShipAdvisesPostWithHttpInfo
     *
     * Get delivery options
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;ServiceLevel&quot;:&quot;test&quot;,&quot;Price&quot;:&quot;1&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipAdvisesPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipAdvisesPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipAdvisesPostAsync
     *
     * Get delivery options
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;ServiceLevel&quot;:&quot;test&quot;,&quot;Price&quot;:&quot;1&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipAdvisesPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDShipAdvisesPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipAdvisesPostAsyncWithHttpInfo
     *
     * Get delivery options
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;ServiceLevel&quot;:&quot;test&quot;,&quot;Price&quot;:&quot;1&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipAdvisesPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipAdvisesPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipAdvisesPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;ServiceLevel&quot;:&quot;test&quot;,&quot;Price&quot;:&quot;1&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipAdvisesPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipAdvisesPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipAdvises';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentPricesPost
     *
     * Get Shipment Price
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;DimensionalWeight&quot;: 900, &quot;Weight&quot;: 900, &quot;ActorCSID&quot;: 73, &quot;CarriagePayer&quot;: 1, &quot;ProdConceptID&quot;: 2, &quot;StackCSID&quot;: &quot;155&quot;, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Bane&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;5863&quot;, &quot;City&quot;: &quot;BERGEN&quot;, &quot;CountryCode&quot;: &quot;NO&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0680&quot;, &quot;City&quot;: &quot;Oslo&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 900, &quot;PkgWeight&quot;: 900, &quot;Number&quot;: 1 } ] } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentPricesPost($actorID, $body = null)
    {
        $this->shipServerActorIDShipmentPricesPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDShipmentPricesPostWithHttpInfo
     *
     * Get Shipment Price
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;DimensionalWeight&quot;: 900, &quot;Weight&quot;: 900, &quot;ActorCSID&quot;: 73, &quot;CarriagePayer&quot;: 1, &quot;ProdConceptID&quot;: 2, &quot;StackCSID&quot;: &quot;155&quot;, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Bane&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;5863&quot;, &quot;City&quot;: &quot;BERGEN&quot;, &quot;CountryCode&quot;: &quot;NO&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0680&quot;, &quot;City&quot;: &quot;Oslo&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 900, &quot;PkgWeight&quot;: 900, &quot;Number&quot;: 1 } ] } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentPricesPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentPricesPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentPricesPostAsync
     *
     * Get Shipment Price
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;DimensionalWeight&quot;: 900, &quot;Weight&quot;: 900, &quot;ActorCSID&quot;: 73, &quot;CarriagePayer&quot;: 1, &quot;ProdConceptID&quot;: 2, &quot;StackCSID&quot;: &quot;155&quot;, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Bane&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;5863&quot;, &quot;City&quot;: &quot;BERGEN&quot;, &quot;CountryCode&quot;: &quot;NO&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0680&quot;, &quot;City&quot;: &quot;Oslo&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 900, &quot;PkgWeight&quot;: 900, &quot;Number&quot;: 1 } ] } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentPricesPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDShipmentPricesPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentPricesPostAsyncWithHttpInfo
     *
     * Get Shipment Price
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;DimensionalWeight&quot;: 900, &quot;Weight&quot;: 900, &quot;ActorCSID&quot;: 73, &quot;CarriagePayer&quot;: 1, &quot;ProdConceptID&quot;: 2, &quot;StackCSID&quot;: &quot;155&quot;, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Bane&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;5863&quot;, &quot;City&quot;: &quot;BERGEN&quot;, &quot;CountryCode&quot;: &quot;NO&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0680&quot;, &quot;City&quot;: &quot;Oslo&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 900, &quot;PkgWeight&quot;: 900, &quot;Number&quot;: 1 } ] } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentPricesPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentPricesPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentPricesPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;DimensionalWeight&quot;: 900, &quot;Weight&quot;: 900, &quot;ActorCSID&quot;: 73, &quot;CarriagePayer&quot;: 1, &quot;ProdConceptID&quot;: 2, &quot;StackCSID&quot;: &quot;155&quot;, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Bane&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;5863&quot;, &quot;City&quot;: &quot;BERGEN&quot;, &quot;CountryCode&quot;: &quot;NO&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0680&quot;, &quot;City&quot;: &quot;Oslo&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 900, &quot;PkgWeight&quot;: 900, &quot;Number&quot;: 1 } ] } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentPricesPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentPricesPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipmentPrices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentValidationsPost
     *
     * Validate shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;RecName1&quot;, &quot;Name2&quot;: &quot;RecName2&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0680&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;SenName1&quot;, &quot;Name2&quot;: &quot;SenName2&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0681&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 5000, &quot;PkgWeight&quot;: 5000, &quot;GoodsTypeID&quot;: 1, &quot;Pkgs&quot;: [ {}, {} ], &quot;References&quot;: [ { &quot;Kind&quot;: 23, &quot;Value&quot;: &quot;Contents&quot; } ] } ], &quot;References&quot;: [ { &quot;Kind&quot;: 32, &quot;Value&quot;: &quot;AdditionalReference 1&quot; } ], &quot;Amounts&quot;: [ { &quot;Kind&quot;: 1, &quot;CurrencyCode&quot;: &quot;1&quot;, &quot;CurrencyClientId&quot;: 1, &quot;Value&quot;: 10, &quot;ShipmentId&quot;: 0, &quot;Id&quot;: 0 } ], &quot;Messages&quot;: [ { &quot;Kind&quot;: 2, &quot;Text&quot;: &quot;CarrierMessage 1&quot;, &quot;ShipmentId&quot;: 0, &quot;Id&quot;: 0 } ], &quot;ProdConceptID&quot;: 185 }, &quot;options&quot;: { &quot;Labels&quot;: &quot;none&quot; } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentValidationsPost($actorID, $body = null)
    {
        $this->shipServerActorIDShipmentValidationsPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDShipmentValidationsPostWithHttpInfo
     *
     * Validate shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;RecName1&quot;, &quot;Name2&quot;: &quot;RecName2&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0680&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;SenName1&quot;, &quot;Name2&quot;: &quot;SenName2&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0681&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 5000, &quot;PkgWeight&quot;: 5000, &quot;GoodsTypeID&quot;: 1, &quot;Pkgs&quot;: [ {}, {} ], &quot;References&quot;: [ { &quot;Kind&quot;: 23, &quot;Value&quot;: &quot;Contents&quot; } ] } ], &quot;References&quot;: [ { &quot;Kind&quot;: 32, &quot;Value&quot;: &quot;AdditionalReference 1&quot; } ], &quot;Amounts&quot;: [ { &quot;Kind&quot;: 1, &quot;CurrencyCode&quot;: &quot;1&quot;, &quot;CurrencyClientId&quot;: 1, &quot;Value&quot;: 10, &quot;ShipmentId&quot;: 0, &quot;Id&quot;: 0 } ], &quot;Messages&quot;: [ { &quot;Kind&quot;: 2, &quot;Text&quot;: &quot;CarrierMessage 1&quot;, &quot;ShipmentId&quot;: 0, &quot;Id&quot;: 0 } ], &quot;ProdConceptID&quot;: 185 }, &quot;options&quot;: { &quot;Labels&quot;: &quot;none&quot; } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentValidationsPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentValidationsPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentValidationsPostAsync
     *
     * Validate shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;RecName1&quot;, &quot;Name2&quot;: &quot;RecName2&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0680&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;SenName1&quot;, &quot;Name2&quot;: &quot;SenName2&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0681&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 5000, &quot;PkgWeight&quot;: 5000, &quot;GoodsTypeID&quot;: 1, &quot;Pkgs&quot;: [ {}, {} ], &quot;References&quot;: [ { &quot;Kind&quot;: 23, &quot;Value&quot;: &quot;Contents&quot; } ] } ], &quot;References&quot;: [ { &quot;Kind&quot;: 32, &quot;Value&quot;: &quot;AdditionalReference 1&quot; } ], &quot;Amounts&quot;: [ { &quot;Kind&quot;: 1, &quot;CurrencyCode&quot;: &quot;1&quot;, &quot;CurrencyClientId&quot;: 1, &quot;Value&quot;: 10, &quot;ShipmentId&quot;: 0, &quot;Id&quot;: 0 } ], &quot;Messages&quot;: [ { &quot;Kind&quot;: 2, &quot;Text&quot;: &quot;CarrierMessage 1&quot;, &quot;ShipmentId&quot;: 0, &quot;Id&quot;: 0 } ], &quot;ProdConceptID&quot;: 185 }, &quot;options&quot;: { &quot;Labels&quot;: &quot;none&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentValidationsPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDShipmentValidationsPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentValidationsPostAsyncWithHttpInfo
     *
     * Validate shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;RecName1&quot;, &quot;Name2&quot;: &quot;RecName2&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0680&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;SenName1&quot;, &quot;Name2&quot;: &quot;SenName2&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0681&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 5000, &quot;PkgWeight&quot;: 5000, &quot;GoodsTypeID&quot;: 1, &quot;Pkgs&quot;: [ {}, {} ], &quot;References&quot;: [ { &quot;Kind&quot;: 23, &quot;Value&quot;: &quot;Contents&quot; } ] } ], &quot;References&quot;: [ { &quot;Kind&quot;: 32, &quot;Value&quot;: &quot;AdditionalReference 1&quot; } ], &quot;Amounts&quot;: [ { &quot;Kind&quot;: 1, &quot;CurrencyCode&quot;: &quot;1&quot;, &quot;CurrencyClientId&quot;: 1, &quot;Value&quot;: 10, &quot;ShipmentId&quot;: 0, &quot;Id&quot;: 0 } ], &quot;Messages&quot;: [ { &quot;Kind&quot;: 2, &quot;Text&quot;: &quot;CarrierMessage 1&quot;, &quot;ShipmentId&quot;: 0, &quot;Id&quot;: 0 } ], &quot;ProdConceptID&quot;: 185 }, &quot;options&quot;: { &quot;Labels&quot;: &quot;none&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentValidationsPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentValidationsPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentValidationsPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;RecName1&quot;, &quot;Name2&quot;: &quot;RecName2&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0680&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;Phone&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;SenName1&quot;, &quot;Name2&quot;: &quot;SenName2&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;0681&quot;, &quot;City&quot;: &quot;OSLO&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, &quot;CountryCode&quot;: &quot;NO&quot; } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 5000, &quot;PkgWeight&quot;: 5000, &quot;GoodsTypeID&quot;: 1, &quot;Pkgs&quot;: [ {}, {} ], &quot;References&quot;: [ { &quot;Kind&quot;: 23, &quot;Value&quot;: &quot;Contents&quot; } ] } ], &quot;References&quot;: [ { &quot;Kind&quot;: 32, &quot;Value&quot;: &quot;AdditionalReference 1&quot; } ], &quot;Amounts&quot;: [ { &quot;Kind&quot;: 1, &quot;CurrencyCode&quot;: &quot;1&quot;, &quot;CurrencyClientId&quot;: 1, &quot;Value&quot;: 10, &quot;ShipmentId&quot;: 0, &quot;Id&quot;: 0 } ], &quot;Messages&quot;: [ { &quot;Kind&quot;: 2, &quot;Text&quot;: &quot;CarrierMessage 1&quot;, &quot;ShipmentId&quot;: 0, &quot;Id&quot;: 0 } ], &quot;ProdConceptID&quot;: 185 }, &quot;options&quot;: { &quot;Labels&quot;: &quot;none&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentValidationsPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentValidationsPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipmentValidations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsDefaultsPost
     *
     * Apply defaults on shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;ProdCSID&quot;:4338,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;ProductChanged&quot;:1430}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsDefaultsPost($actorID, $body = null)
    {
        $this->shipServerActorIDShipmentsDefaultsPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDShipmentsDefaultsPostWithHttpInfo
     *
     * Apply defaults on shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;ProdCSID&quot;:4338,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;ProductChanged&quot;:1430}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsDefaultsPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsDefaultsPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsDefaultsPostAsync
     *
     * Apply defaults on shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;ProdCSID&quot;:4338,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;ProductChanged&quot;:1430}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsDefaultsPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDShipmentsDefaultsPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsDefaultsPostAsyncWithHttpInfo
     *
     * Apply defaults on shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;ProdCSID&quot;:4338,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;ProductChanged&quot;:1430}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsDefaultsPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsDefaultsPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsDefaultsPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:&quot;1&quot;,&quot;ProdCSID&quot;:4338,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Mr Test Order&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;1405&quot;,&quot;City&quot;:&quot;Langhus&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;PkgWeight&quot;:&quot;111&quot;,&quot;Height&quot;:&quot;10&quot;,&quot;Length&quot;:&quot;100&quot;,&quot;Width&quot;:&quot;100&quot;,&quot;PkgVol&quot;:&quot;10000&quot;,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1}]}]},&quot;options&quot;:{&quot;ProductChanged&quot;:1430}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsDefaultsPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsDefaultsPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments/defaults';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsLabelReprintPost
     *
     * Reprint Labels
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ShpCSID&quot;:2} ,&quot;options&quot;:{&quot;Labels&quot;:&quot;PNG&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsLabelReprintPost($actorID, $body = null)
    {
        $this->shipServerActorIDShipmentsLabelReprintPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDShipmentsLabelReprintPostWithHttpInfo
     *
     * Reprint Labels
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ShpCSID&quot;:2} ,&quot;options&quot;:{&quot;Labels&quot;:&quot;PNG&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsLabelReprintPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsLabelReprintPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsLabelReprintPostAsync
     *
     * Reprint Labels
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ShpCSID&quot;:2} ,&quot;options&quot;:{&quot;Labels&quot;:&quot;PNG&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsLabelReprintPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDShipmentsLabelReprintPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsLabelReprintPostAsyncWithHttpInfo
     *
     * Reprint Labels
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ShpCSID&quot;:2} ,&quot;options&quot;:{&quot;Labels&quot;:&quot;PNG&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsLabelReprintPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsLabelReprintPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsLabelReprintPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ShpCSID&quot;:2} ,&quot;options&quot;:{&quot;Labels&quot;:&quot;PNG&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsLabelReprintPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsLabelReprintPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments/labelReprint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsManifestPut
     *
     * Transmit/manifest Shipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PUT:  {&quot;data&quot;:{&quot;ShipmentTags&quot;:[&quot;021602A9-F214-49B5-89BE-A40DC6E4CF55&quot;, &quot;5D534521-8152-4483-8ED7-B74FD1BBF8DD&quot;]},&quot;options&quot;:{}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsManifestPut($actorID, $body = null)
    {
        $this->shipServerActorIDShipmentsManifestPutWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDShipmentsManifestPutWithHttpInfo
     *
     * Transmit/manifest Shipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PUT:  {&quot;data&quot;:{&quot;ShipmentTags&quot;:[&quot;021602A9-F214-49B5-89BE-A40DC6E4CF55&quot;, &quot;5D534521-8152-4483-8ED7-B74FD1BBF8DD&quot;]},&quot;options&quot;:{}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsManifestPutWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsManifestPutRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsManifestPutAsync
     *
     * Transmit/manifest Shipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PUT:  {&quot;data&quot;:{&quot;ShipmentTags&quot;:[&quot;021602A9-F214-49B5-89BE-A40DC6E4CF55&quot;, &quot;5D534521-8152-4483-8ED7-B74FD1BBF8DD&quot;]},&quot;options&quot;:{}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsManifestPutAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDShipmentsManifestPutAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsManifestPutAsyncWithHttpInfo
     *
     * Transmit/manifest Shipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PUT:  {&quot;data&quot;:{&quot;ShipmentTags&quot;:[&quot;021602A9-F214-49B5-89BE-A40DC6E4CF55&quot;, &quot;5D534521-8152-4483-8ED7-B74FD1BBF8DD&quot;]},&quot;options&quot;:{}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsManifestPutAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsManifestPutRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsManifestPut'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PUT:  {&quot;data&quot;:{&quot;ShipmentTags&quot;:[&quot;021602A9-F214-49B5-89BE-A40DC6E4CF55&quot;, &quot;5D534521-8152-4483-8ED7-B74FD1BBF8DD&quot;]},&quot;options&quot;:{}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsManifestPutRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsManifestPut'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments/manifest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsPost
     *
     * Submit/Print Shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 500, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ] }, &quot;options&quot;: { &quot;TimeLog&quot;: 0, &quot;UseShippingRules&quot;: 0, &quot;Visibility&quot;: &quot;extended&quot;, &quot;Labels&quot;: &quot;ZPLGK&quot; } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsPost($actorID, $body = null)
    {
        $this->shipServerActorIDShipmentsPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDShipmentsPostWithHttpInfo
     *
     * Submit/Print Shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 500, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ] }, &quot;options&quot;: { &quot;TimeLog&quot;: 0, &quot;UseShippingRules&quot;: 0, &quot;Visibility&quot;: &quot;extended&quot;, &quot;Labels&quot;: &quot;ZPLGK&quot; } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsPostAsync
     *
     * Submit/Print Shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 500, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ] }, &quot;options&quot;: { &quot;TimeLog&quot;: 0, &quot;UseShippingRules&quot;: 0, &quot;Visibility&quot;: &quot;extended&quot;, &quot;Labels&quot;: &quot;ZPLGK&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDShipmentsPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsPostAsyncWithHttpInfo
     *
     * Submit/Print Shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 500, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ] }, &quot;options&quot;: { &quot;TimeLog&quot;: 0, &quot;UseShippingRules&quot;: 0, &quot;Visibility&quot;: &quot;extended&quot;, &quot;Labels&quot;: &quot;ZPLGK&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot;, } ], &quot;Lines&quot;: [ { &quot;LineWeight&quot;: 500, &quot;Pkgs&quot;: [ { &quot;ItemNo&quot;: 1 } ] } ] }, &quot;options&quot;: { &quot;TimeLog&quot;: 0, &quot;UseShippingRules&quot;: 0, &quot;Visibility&quot;: &quot;extended&quot;, &quot;Labels&quot;: &quot;ZPLGK&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDelete
     *
     * Delete shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Optional - can be empty (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsShipmentTagDelete($actorID, $shipmentTag, $body = null)
    {
        $this->shipServerActorIDShipmentsShipmentTagDeleteWithHttpInfo($actorID, $shipmentTag, $body);
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDeleteWithHttpInfo
     *
     * Delete shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Optional - can be empty (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsShipmentTagDeleteWithHttpInfo($actorID, $shipmentTag, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagDeleteRequest($actorID, $shipmentTag, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDeleteAsync
     *
     * Delete shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Optional - can be empty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagDeleteAsync($actorID, $shipmentTag, $body = null)
    {
        return $this->shipServerActorIDShipmentsShipmentTagDeleteAsyncWithHttpInfo($actorID, $shipmentTag, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDeleteAsyncWithHttpInfo
     *
     * Delete shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Optional - can be empty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagDeleteAsyncWithHttpInfo($actorID, $shipmentTag, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagDeleteRequest($actorID, $shipmentTag, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsShipmentTagDelete'
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Optional - can be empty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsShipmentTagDeleteRequest($actorID, $shipmentTag, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsShipmentTagDelete'
            );
        }
        // verify the required parameter 'shipmentTag' is set
        if ($shipmentTag === null || (is_array($shipmentTag) && count($shipmentTag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentTag when calling shipServerActorIDShipmentsShipmentTagDelete'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments/{shipmentTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($shipmentTag !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentTag' . '}',
                ObjectSerializer::toPathValue($shipmentTag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDetailsPatch
     *
     * Update Details
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;DetailGroups&quot;:[{&quot;GroupID&quot;:1,&quot;GroupDisplayName&quot;:&quot;Customs Article&quot;,&quot;Rows&quot;:[{&quot;RowNo&quot;:1,&quot;LineNo&quot;:1,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;Updated A for l1&quot;,&quot;DisplayName&quot;:&quot;Article No&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;Updated desc l1&quot;,&quot;DisplayName&quot;:&quot;Description of Goods&quot;}]},{&quot;RowNo&quot;:2,&quot;LineNo&quot;:2,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;A for l2&quot;,&quot;DisplayName&quot;:&quot;Article No&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;desc l2&quot;,&quot;DisplayName&quot;:&quot;Description of Goods&quot;}]}]},{&quot;GroupID&quot;:2,&quot;GroupDisplayName&quot;:&quot;Customs Information&quot;,&quot;Details&quot;:[{&quot;KindID&quot;:11,&quot;Value&quot;:&quot;Updated VAT Sender&quot;,&quot;DisplayName&quot;:&quot;Vat No (Sender)&quot;}]}]},&quot;options&quot;:{&quot;Labels&quot;:&quot;none&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsShipmentTagDetailsPatch($actorID, $shipmentTag, $body = null)
    {
        $this->shipServerActorIDShipmentsShipmentTagDetailsPatchWithHttpInfo($actorID, $shipmentTag, $body);
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDetailsPatchWithHttpInfo
     *
     * Update Details
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;DetailGroups&quot;:[{&quot;GroupID&quot;:1,&quot;GroupDisplayName&quot;:&quot;Customs Article&quot;,&quot;Rows&quot;:[{&quot;RowNo&quot;:1,&quot;LineNo&quot;:1,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;Updated A for l1&quot;,&quot;DisplayName&quot;:&quot;Article No&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;Updated desc l1&quot;,&quot;DisplayName&quot;:&quot;Description of Goods&quot;}]},{&quot;RowNo&quot;:2,&quot;LineNo&quot;:2,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;A for l2&quot;,&quot;DisplayName&quot;:&quot;Article No&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;desc l2&quot;,&quot;DisplayName&quot;:&quot;Description of Goods&quot;}]}]},{&quot;GroupID&quot;:2,&quot;GroupDisplayName&quot;:&quot;Customs Information&quot;,&quot;Details&quot;:[{&quot;KindID&quot;:11,&quot;Value&quot;:&quot;Updated VAT Sender&quot;,&quot;DisplayName&quot;:&quot;Vat No (Sender)&quot;}]}]},&quot;options&quot;:{&quot;Labels&quot;:&quot;none&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsShipmentTagDetailsPatchWithHttpInfo($actorID, $shipmentTag, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagDetailsPatchRequest($actorID, $shipmentTag, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDetailsPatchAsync
     *
     * Update Details
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;DetailGroups&quot;:[{&quot;GroupID&quot;:1,&quot;GroupDisplayName&quot;:&quot;Customs Article&quot;,&quot;Rows&quot;:[{&quot;RowNo&quot;:1,&quot;LineNo&quot;:1,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;Updated A for l1&quot;,&quot;DisplayName&quot;:&quot;Article No&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;Updated desc l1&quot;,&quot;DisplayName&quot;:&quot;Description of Goods&quot;}]},{&quot;RowNo&quot;:2,&quot;LineNo&quot;:2,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;A for l2&quot;,&quot;DisplayName&quot;:&quot;Article No&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;desc l2&quot;,&quot;DisplayName&quot;:&quot;Description of Goods&quot;}]}]},{&quot;GroupID&quot;:2,&quot;GroupDisplayName&quot;:&quot;Customs Information&quot;,&quot;Details&quot;:[{&quot;KindID&quot;:11,&quot;Value&quot;:&quot;Updated VAT Sender&quot;,&quot;DisplayName&quot;:&quot;Vat No (Sender)&quot;}]}]},&quot;options&quot;:{&quot;Labels&quot;:&quot;none&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagDetailsPatchAsync($actorID, $shipmentTag, $body = null)
    {
        return $this->shipServerActorIDShipmentsShipmentTagDetailsPatchAsyncWithHttpInfo($actorID, $shipmentTag, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDetailsPatchAsyncWithHttpInfo
     *
     * Update Details
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;DetailGroups&quot;:[{&quot;GroupID&quot;:1,&quot;GroupDisplayName&quot;:&quot;Customs Article&quot;,&quot;Rows&quot;:[{&quot;RowNo&quot;:1,&quot;LineNo&quot;:1,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;Updated A for l1&quot;,&quot;DisplayName&quot;:&quot;Article No&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;Updated desc l1&quot;,&quot;DisplayName&quot;:&quot;Description of Goods&quot;}]},{&quot;RowNo&quot;:2,&quot;LineNo&quot;:2,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;A for l2&quot;,&quot;DisplayName&quot;:&quot;Article No&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;desc l2&quot;,&quot;DisplayName&quot;:&quot;Description of Goods&quot;}]}]},{&quot;GroupID&quot;:2,&quot;GroupDisplayName&quot;:&quot;Customs Information&quot;,&quot;Details&quot;:[{&quot;KindID&quot;:11,&quot;Value&quot;:&quot;Updated VAT Sender&quot;,&quot;DisplayName&quot;:&quot;Vat No (Sender)&quot;}]}]},&quot;options&quot;:{&quot;Labels&quot;:&quot;none&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagDetailsPatchAsyncWithHttpInfo($actorID, $shipmentTag, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagDetailsPatchRequest($actorID, $shipmentTag, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsShipmentTagDetailsPatch'
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;DetailGroups&quot;:[{&quot;GroupID&quot;:1,&quot;GroupDisplayName&quot;:&quot;Customs Article&quot;,&quot;Rows&quot;:[{&quot;RowNo&quot;:1,&quot;LineNo&quot;:1,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;Updated A for l1&quot;,&quot;DisplayName&quot;:&quot;Article No&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;Updated desc l1&quot;,&quot;DisplayName&quot;:&quot;Description of Goods&quot;}]},{&quot;RowNo&quot;:2,&quot;LineNo&quot;:2,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;A for l2&quot;,&quot;DisplayName&quot;:&quot;Article No&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;desc l2&quot;,&quot;DisplayName&quot;:&quot;Description of Goods&quot;}]}]},{&quot;GroupID&quot;:2,&quot;GroupDisplayName&quot;:&quot;Customs Information&quot;,&quot;Details&quot;:[{&quot;KindID&quot;:11,&quot;Value&quot;:&quot;Updated VAT Sender&quot;,&quot;DisplayName&quot;:&quot;Vat No (Sender)&quot;}]}]},&quot;options&quot;:{&quot;Labels&quot;:&quot;none&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsShipmentTagDetailsPatchRequest($actorID, $shipmentTag, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsShipmentTagDetailsPatch'
            );
        }
        // verify the required parameter 'shipmentTag' is set
        if ($shipmentTag === null || (is_array($shipmentTag) && count($shipmentTag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentTag when calling shipServerActorIDShipmentsShipmentTagDetailsPatch'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments/{shipmentTag}/details';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($shipmentTag !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentTag' . '}',
                ObjectSerializer::toPathValue($shipmentTag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDocumentListsGet
     *
     * Get document list for a shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsShipmentTagDocumentListsGet($actorID, $shipmentTag)
    {
        $this->shipServerActorIDShipmentsShipmentTagDocumentListsGetWithHttpInfo($actorID, $shipmentTag);
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDocumentListsGetWithHttpInfo
     *
     * Get document list for a shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsShipmentTagDocumentListsGetWithHttpInfo($actorID, $shipmentTag)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagDocumentListsGetRequest($actorID, $shipmentTag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDocumentListsGetAsync
     *
     * Get document list for a shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagDocumentListsGetAsync($actorID, $shipmentTag)
    {
        return $this->shipServerActorIDShipmentsShipmentTagDocumentListsGetAsyncWithHttpInfo($actorID, $shipmentTag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDocumentListsGetAsyncWithHttpInfo
     *
     * Get document list for a shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagDocumentListsGetAsyncWithHttpInfo($actorID, $shipmentTag)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagDocumentListsGetRequest($actorID, $shipmentTag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsShipmentTagDocumentListsGet'
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsShipmentTagDocumentListsGetRequest($actorID, $shipmentTag)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsShipmentTagDocumentListsGet'
            );
        }
        // verify the required parameter 'shipmentTag' is set
        if ($shipmentTag === null || (is_array($shipmentTag) && count($shipmentTag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentTag when calling shipServerActorIDShipmentsShipmentTagDocumentListsGet'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments/{shipmentTag}/documentLists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($shipmentTag !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentTag' . '}',
                ObjectSerializer::toPathValue($shipmentTag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDocumentsGet
     *
     * Get documents for a shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsShipmentTagDocumentsGet($actorID, $shipmentTag)
    {
        $this->shipServerActorIDShipmentsShipmentTagDocumentsGetWithHttpInfo($actorID, $shipmentTag);
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDocumentsGetWithHttpInfo
     *
     * Get documents for a shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsShipmentTagDocumentsGetWithHttpInfo($actorID, $shipmentTag)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagDocumentsGetRequest($actorID, $shipmentTag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDocumentsGetAsync
     *
     * Get documents for a shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagDocumentsGetAsync($actorID, $shipmentTag)
    {
        return $this->shipServerActorIDShipmentsShipmentTagDocumentsGetAsyncWithHttpInfo($actorID, $shipmentTag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagDocumentsGetAsyncWithHttpInfo
     *
     * Get documents for a shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagDocumentsGetAsyncWithHttpInfo($actorID, $shipmentTag)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagDocumentsGetRequest($actorID, $shipmentTag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsShipmentTagDocumentsGet'
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsShipmentTagDocumentsGetRequest($actorID, $shipmentTag)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsShipmentTagDocumentsGet'
            );
        }
        // verify the required parameter 'shipmentTag' is set
        if ($shipmentTag === null || (is_array($shipmentTag) && count($shipmentTag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentTag when calling shipServerActorIDShipmentsShipmentTagDocumentsGet'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments/{shipmentTag}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($shipmentTag !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentTag' . '}',
                ObjectSerializer::toPathValue($shipmentTag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagGet
     *
     * Get existing shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsShipmentTagGet($actorID, $shipmentTag)
    {
        $this->shipServerActorIDShipmentsShipmentTagGetWithHttpInfo($actorID, $shipmentTag);
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagGetWithHttpInfo
     *
     * Get existing shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsShipmentTagGetWithHttpInfo($actorID, $shipmentTag)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagGetRequest($actorID, $shipmentTag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagGetAsync
     *
     * Get existing shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagGetAsync($actorID, $shipmentTag)
    {
        return $this->shipServerActorIDShipmentsShipmentTagGetAsyncWithHttpInfo($actorID, $shipmentTag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagGetAsyncWithHttpInfo
     *
     * Get existing shipment
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagGetAsyncWithHttpInfo($actorID, $shipmentTag)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagGetRequest($actorID, $shipmentTag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsShipmentTagGet'
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsShipmentTagGetRequest($actorID, $shipmentTag)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsShipmentTagGet'
            );
        }
        // verify the required parameter 'shipmentTag' is set
        if ($shipmentTag === null || (is_array($shipmentTag) && count($shipmentTag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentTag when calling shipServerActorIDShipmentsShipmentTagGet'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments/{shipmentTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($shipmentTag !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentTag' . '}',
                ObjectSerializer::toPathValue($shipmentTag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagLinesLineTagDelete
     *
     * Delete line
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $lineTag Line Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsShipmentTagLinesLineTagDelete($actorID, $shipmentTag, $lineTag, $body = null)
    {
        $this->shipServerActorIDShipmentsShipmentTagLinesLineTagDeleteWithHttpInfo($actorID, $shipmentTag, $lineTag, $body);
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagLinesLineTagDeleteWithHttpInfo
     *
     * Delete line
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $lineTag Line Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsShipmentTagLinesLineTagDeleteWithHttpInfo($actorID, $shipmentTag, $lineTag, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagLinesLineTagDeleteRequest($actorID, $shipmentTag, $lineTag, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagLinesLineTagDeleteAsync
     *
     * Delete line
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $lineTag Line Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagLinesLineTagDeleteAsync($actorID, $shipmentTag, $lineTag, $body = null)
    {
        return $this->shipServerActorIDShipmentsShipmentTagLinesLineTagDeleteAsyncWithHttpInfo($actorID, $shipmentTag, $lineTag, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagLinesLineTagDeleteAsyncWithHttpInfo
     *
     * Delete line
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $lineTag Line Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagLinesLineTagDeleteAsyncWithHttpInfo($actorID, $shipmentTag, $lineTag, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagLinesLineTagDeleteRequest($actorID, $shipmentTag, $lineTag, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsShipmentTagLinesLineTagDelete'
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $lineTag Line Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsShipmentTagLinesLineTagDeleteRequest($actorID, $shipmentTag, $lineTag, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsShipmentTagLinesLineTagDelete'
            );
        }
        // verify the required parameter 'shipmentTag' is set
        if ($shipmentTag === null || (is_array($shipmentTag) && count($shipmentTag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentTag when calling shipServerActorIDShipmentsShipmentTagLinesLineTagDelete'
            );
        }
        // verify the required parameter 'lineTag' is set
        if ($lineTag === null || (is_array($lineTag) && count($lineTag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lineTag when calling shipServerActorIDShipmentsShipmentTagLinesLineTagDelete'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments/{shipmentTag}/lines/{lineTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($shipmentTag !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentTag' . '}',
                ObjectSerializer::toPathValue($shipmentTag),
                $resourcePath
            );
        }
        // path params
        if ($lineTag !== null) {
            $resourcePath = str_replace(
                '{' . 'lineTag' . '}',
                ObjectSerializer::toPathValue($lineTag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagLinesLineTagPatch
     *
     * Update Line
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $lineTag Line Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;LineWeight&quot;:5000,&quot;PkgWeight&quot;:5000,&quot;LineVol&quot;:1000000,&quot;PickupDt&quot;:&quot;2022-11-12T00:00:00&quot;,&quot;PkgVol&quot;:1000000,&quot;Loadmeter&quot;:20,&quot;GoodsTypeID&quot;:1,&quot;GoodsTypeName&quot;:&quot;Paket&quot;,&quot;RecycleTypeID&quot;:1,&quot;RecycleTypeName&quot;:&quot;EUR&quot;,&quot;RecycleTypeCode&quot;:&quot;EUR&quot;,&quot;GoodsTypeKey1&quot;:&quot;PC&quot;,&quot;GoodsTypeKey2&quot;:&quot;PKT&quot;,&quot;Pkgs&quot;:[{&quot;PkgCSID&quot;:122027,&quot;ItemNo&quot;:1}]},&quot;options&quot;:{&quot;Labels&quot;:&quot;none&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsShipmentTagLinesLineTagPatch($actorID, $shipmentTag, $lineTag, $body = null)
    {
        $this->shipServerActorIDShipmentsShipmentTagLinesLineTagPatchWithHttpInfo($actorID, $shipmentTag, $lineTag, $body);
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagLinesLineTagPatchWithHttpInfo
     *
     * Update Line
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $lineTag Line Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;LineWeight&quot;:5000,&quot;PkgWeight&quot;:5000,&quot;LineVol&quot;:1000000,&quot;PickupDt&quot;:&quot;2022-11-12T00:00:00&quot;,&quot;PkgVol&quot;:1000000,&quot;Loadmeter&quot;:20,&quot;GoodsTypeID&quot;:1,&quot;GoodsTypeName&quot;:&quot;Paket&quot;,&quot;RecycleTypeID&quot;:1,&quot;RecycleTypeName&quot;:&quot;EUR&quot;,&quot;RecycleTypeCode&quot;:&quot;EUR&quot;,&quot;GoodsTypeKey1&quot;:&quot;PC&quot;,&quot;GoodsTypeKey2&quot;:&quot;PKT&quot;,&quot;Pkgs&quot;:[{&quot;PkgCSID&quot;:122027,&quot;ItemNo&quot;:1}]},&quot;options&quot;:{&quot;Labels&quot;:&quot;none&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsShipmentTagLinesLineTagPatchWithHttpInfo($actorID, $shipmentTag, $lineTag, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagLinesLineTagPatchRequest($actorID, $shipmentTag, $lineTag, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagLinesLineTagPatchAsync
     *
     * Update Line
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $lineTag Line Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;LineWeight&quot;:5000,&quot;PkgWeight&quot;:5000,&quot;LineVol&quot;:1000000,&quot;PickupDt&quot;:&quot;2022-11-12T00:00:00&quot;,&quot;PkgVol&quot;:1000000,&quot;Loadmeter&quot;:20,&quot;GoodsTypeID&quot;:1,&quot;GoodsTypeName&quot;:&quot;Paket&quot;,&quot;RecycleTypeID&quot;:1,&quot;RecycleTypeName&quot;:&quot;EUR&quot;,&quot;RecycleTypeCode&quot;:&quot;EUR&quot;,&quot;GoodsTypeKey1&quot;:&quot;PC&quot;,&quot;GoodsTypeKey2&quot;:&quot;PKT&quot;,&quot;Pkgs&quot;:[{&quot;PkgCSID&quot;:122027,&quot;ItemNo&quot;:1}]},&quot;options&quot;:{&quot;Labels&quot;:&quot;none&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagLinesLineTagPatchAsync($actorID, $shipmentTag, $lineTag, $body = null)
    {
        return $this->shipServerActorIDShipmentsShipmentTagLinesLineTagPatchAsyncWithHttpInfo($actorID, $shipmentTag, $lineTag, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagLinesLineTagPatchAsyncWithHttpInfo
     *
     * Update Line
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $lineTag Line Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;LineWeight&quot;:5000,&quot;PkgWeight&quot;:5000,&quot;LineVol&quot;:1000000,&quot;PickupDt&quot;:&quot;2022-11-12T00:00:00&quot;,&quot;PkgVol&quot;:1000000,&quot;Loadmeter&quot;:20,&quot;GoodsTypeID&quot;:1,&quot;GoodsTypeName&quot;:&quot;Paket&quot;,&quot;RecycleTypeID&quot;:1,&quot;RecycleTypeName&quot;:&quot;EUR&quot;,&quot;RecycleTypeCode&quot;:&quot;EUR&quot;,&quot;GoodsTypeKey1&quot;:&quot;PC&quot;,&quot;GoodsTypeKey2&quot;:&quot;PKT&quot;,&quot;Pkgs&quot;:[{&quot;PkgCSID&quot;:122027,&quot;ItemNo&quot;:1}]},&quot;options&quot;:{&quot;Labels&quot;:&quot;none&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagLinesLineTagPatchAsyncWithHttpInfo($actorID, $shipmentTag, $lineTag, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagLinesLineTagPatchRequest($actorID, $shipmentTag, $lineTag, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsShipmentTagLinesLineTagPatch'
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $lineTag Line Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;LineWeight&quot;:5000,&quot;PkgWeight&quot;:5000,&quot;LineVol&quot;:1000000,&quot;PickupDt&quot;:&quot;2022-11-12T00:00:00&quot;,&quot;PkgVol&quot;:1000000,&quot;Loadmeter&quot;:20,&quot;GoodsTypeID&quot;:1,&quot;GoodsTypeName&quot;:&quot;Paket&quot;,&quot;RecycleTypeID&quot;:1,&quot;RecycleTypeName&quot;:&quot;EUR&quot;,&quot;RecycleTypeCode&quot;:&quot;EUR&quot;,&quot;GoodsTypeKey1&quot;:&quot;PC&quot;,&quot;GoodsTypeKey2&quot;:&quot;PKT&quot;,&quot;Pkgs&quot;:[{&quot;PkgCSID&quot;:122027,&quot;ItemNo&quot;:1}]},&quot;options&quot;:{&quot;Labels&quot;:&quot;none&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsShipmentTagLinesLineTagPatchRequest($actorID, $shipmentTag, $lineTag, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsShipmentTagLinesLineTagPatch'
            );
        }
        // verify the required parameter 'shipmentTag' is set
        if ($shipmentTag === null || (is_array($shipmentTag) && count($shipmentTag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentTag when calling shipServerActorIDShipmentsShipmentTagLinesLineTagPatch'
            );
        }
        // verify the required parameter 'lineTag' is set
        if ($lineTag === null || (is_array($lineTag) && count($lineTag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lineTag when calling shipServerActorIDShipmentsShipmentTagLinesLineTagPatch'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments/{shipmentTag}/lines/{lineTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($shipmentTag !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentTag' . '}',
                ObjectSerializer::toPathValue($shipmentTag),
                $resourcePath
            );
        }
        // path params
        if ($lineTag !== null) {
            $resourcePath = str_replace(
                '{' . 'lineTag' . '}',
                ObjectSerializer::toPathValue($lineTag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagLinesPost
     *
     * New shipment line
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;LineWeight&quot;:1000,&quot;PkgWeight&quot;:1000,&quot;Height&quot;:30,&quot;Length&quot;:30,&quot;Width&quot;:30,&quot;LineVol&quot;:27000,&quot;PkgVol&quot;:27000,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1,&quot;References&quot;:[{&quot;Kind&quot;:346,&quot;Value&quot;:&quot;False&quot;}]}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;oranges&quot;},{&quot;Kind&quot;:24,&quot;Value&quot;:&quot;org&quot;},{&quot;Kind&quot;:345,&quot;Value&quot;:&quot;False&quot;}]},&quot;options&quot;:{}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsShipmentTagLinesPost($actorID, $shipmentTag, $body = null)
    {
        $this->shipServerActorIDShipmentsShipmentTagLinesPostWithHttpInfo($actorID, $shipmentTag, $body);
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagLinesPostWithHttpInfo
     *
     * New shipment line
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;LineWeight&quot;:1000,&quot;PkgWeight&quot;:1000,&quot;Height&quot;:30,&quot;Length&quot;:30,&quot;Width&quot;:30,&quot;LineVol&quot;:27000,&quot;PkgVol&quot;:27000,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1,&quot;References&quot;:[{&quot;Kind&quot;:346,&quot;Value&quot;:&quot;False&quot;}]}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;oranges&quot;},{&quot;Kind&quot;:24,&quot;Value&quot;:&quot;org&quot;},{&quot;Kind&quot;:345,&quot;Value&quot;:&quot;False&quot;}]},&quot;options&quot;:{}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsShipmentTagLinesPostWithHttpInfo($actorID, $shipmentTag, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagLinesPostRequest($actorID, $shipmentTag, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagLinesPostAsync
     *
     * New shipment line
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;LineWeight&quot;:1000,&quot;PkgWeight&quot;:1000,&quot;Height&quot;:30,&quot;Length&quot;:30,&quot;Width&quot;:30,&quot;LineVol&quot;:27000,&quot;PkgVol&quot;:27000,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1,&quot;References&quot;:[{&quot;Kind&quot;:346,&quot;Value&quot;:&quot;False&quot;}]}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;oranges&quot;},{&quot;Kind&quot;:24,&quot;Value&quot;:&quot;org&quot;},{&quot;Kind&quot;:345,&quot;Value&quot;:&quot;False&quot;}]},&quot;options&quot;:{}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagLinesPostAsync($actorID, $shipmentTag, $body = null)
    {
        return $this->shipServerActorIDShipmentsShipmentTagLinesPostAsyncWithHttpInfo($actorID, $shipmentTag, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagLinesPostAsyncWithHttpInfo
     *
     * New shipment line
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;LineWeight&quot;:1000,&quot;PkgWeight&quot;:1000,&quot;Height&quot;:30,&quot;Length&quot;:30,&quot;Width&quot;:30,&quot;LineVol&quot;:27000,&quot;PkgVol&quot;:27000,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1,&quot;References&quot;:[{&quot;Kind&quot;:346,&quot;Value&quot;:&quot;False&quot;}]}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;oranges&quot;},{&quot;Kind&quot;:24,&quot;Value&quot;:&quot;org&quot;},{&quot;Kind&quot;:345,&quot;Value&quot;:&quot;False&quot;}]},&quot;options&quot;:{}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagLinesPostAsyncWithHttpInfo($actorID, $shipmentTag, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagLinesPostRequest($actorID, $shipmentTag, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsShipmentTagLinesPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;LineWeight&quot;:1000,&quot;PkgWeight&quot;:1000,&quot;Height&quot;:30,&quot;Length&quot;:30,&quot;Width&quot;:30,&quot;LineVol&quot;:27000,&quot;PkgVol&quot;:27000,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1,&quot;References&quot;:[{&quot;Kind&quot;:346,&quot;Value&quot;:&quot;False&quot;}]}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;oranges&quot;},{&quot;Kind&quot;:24,&quot;Value&quot;:&quot;org&quot;},{&quot;Kind&quot;:345,&quot;Value&quot;:&quot;False&quot;}]},&quot;options&quot;:{}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsShipmentTagLinesPostRequest($actorID, $shipmentTag, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsShipmentTagLinesPost'
            );
        }
        // verify the required parameter 'shipmentTag' is set
        if ($shipmentTag === null || (is_array($shipmentTag) && count($shipmentTag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentTag when calling shipServerActorIDShipmentsShipmentTagLinesPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments/{shipmentTag}/lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($shipmentTag !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentTag' . '}',
                ObjectSerializer::toPathValue($shipmentTag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagPackagesPackageTagDelete
     *
     * Delete package
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $packageTag Package Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsShipmentTagPackagesPackageTagDelete($actorID, $shipmentTag, $packageTag, $body = null)
    {
        $this->shipServerActorIDShipmentsShipmentTagPackagesPackageTagDeleteWithHttpInfo($actorID, $shipmentTag, $packageTag, $body);
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagPackagesPackageTagDeleteWithHttpInfo
     *
     * Delete package
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $packageTag Package Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsShipmentTagPackagesPackageTagDeleteWithHttpInfo($actorID, $shipmentTag, $packageTag, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagPackagesPackageTagDeleteRequest($actorID, $shipmentTag, $packageTag, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagPackagesPackageTagDeleteAsync
     *
     * Delete package
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $packageTag Package Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagPackagesPackageTagDeleteAsync($actorID, $shipmentTag, $packageTag, $body = null)
    {
        return $this->shipServerActorIDShipmentsShipmentTagPackagesPackageTagDeleteAsyncWithHttpInfo($actorID, $shipmentTag, $packageTag, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagPackagesPackageTagDeleteAsyncWithHttpInfo
     *
     * Delete package
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $packageTag Package Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagPackagesPackageTagDeleteAsyncWithHttpInfo($actorID, $shipmentTag, $packageTag, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagPackagesPackageTagDeleteRequest($actorID, $shipmentTag, $packageTag, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsShipmentTagPackagesPackageTagDelete'
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     * @param  string $packageTag Package Tag (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsShipmentTagPackagesPackageTagDeleteRequest($actorID, $shipmentTag, $packageTag, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsShipmentTagPackagesPackageTagDelete'
            );
        }
        // verify the required parameter 'shipmentTag' is set
        if ($shipmentTag === null || (is_array($shipmentTag) && count($shipmentTag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentTag when calling shipServerActorIDShipmentsShipmentTagPackagesPackageTagDelete'
            );
        }
        // verify the required parameter 'packageTag' is set
        if ($packageTag === null || (is_array($packageTag) && count($packageTag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packageTag when calling shipServerActorIDShipmentsShipmentTagPackagesPackageTagDelete'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments/{shipmentTag}/packages/{packageTag}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($shipmentTag !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentTag' . '}',
                ObjectSerializer::toPathValue($shipmentTag),
                $resourcePath
            );
        }
        // path params
        if ($packageTag !== null) {
            $resourcePath = str_replace(
                '{' . 'packageTag' . '}',
                ObjectSerializer::toPathValue($packageTag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagTrackingURLGet
     *
     * Get Tracking URL
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShipmentsShipmentTagTrackingURLGet($actorID, $shipmentTag)
    {
        $this->shipServerActorIDShipmentsShipmentTagTrackingURLGetWithHttpInfo($actorID, $shipmentTag);
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagTrackingURLGetWithHttpInfo
     *
     * Get Tracking URL
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShipmentsShipmentTagTrackingURLGetWithHttpInfo($actorID, $shipmentTag)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagTrackingURLGetRequest($actorID, $shipmentTag);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagTrackingURLGetAsync
     *
     * Get Tracking URL
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagTrackingURLGetAsync($actorID, $shipmentTag)
    {
        return $this->shipServerActorIDShipmentsShipmentTagTrackingURLGetAsyncWithHttpInfo($actorID, $shipmentTag)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShipmentsShipmentTagTrackingURLGetAsyncWithHttpInfo
     *
     * Get Tracking URL
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShipmentsShipmentTagTrackingURLGetAsyncWithHttpInfo($actorID, $shipmentTag)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShipmentsShipmentTagTrackingURLGetRequest($actorID, $shipmentTag);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShipmentsShipmentTagTrackingURLGet'
     *
     * @param  int $actorID Actor ID (required)
     * @param  string $shipmentTag Shipment Tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShipmentsShipmentTagTrackingURLGetRequest($actorID, $shipmentTag)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShipmentsShipmentTagTrackingURLGet'
            );
        }
        // verify the required parameter 'shipmentTag' is set
        if ($shipmentTag === null || (is_array($shipmentTag) && count($shipmentTag) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipmentTag when calling shipServerActorIDShipmentsShipmentTagTrackingURLGet'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shipments/{shipmentTag}/trackingURL';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($shipmentTag !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentTag' . '}',
                ObjectSerializer::toPathValue($shipmentTag),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDShippingRulesPost
     *
     * Save shipping rules
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;ShippingRules&quot;: &quot;PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxDU1I+DQoJPFNlcnZpY2VMZXZlbHM+DQoJCTxTZXJ2aWNlTGV2ZWwgbmFtZT0iU3RhbmRhcmQiPg0KCQkJPFByb2R1Y3RzPg0KCQkJCTxQcm9kdWN0IG5hbWU9IkJ1ZCIgY29uY2VwdGlkPSI3MDYiIGNvbW1lbnQ9IkdCIiByYW5rPSIxMDAiPg0KCQkJCQk8VmFsaWRhdGlvblJ1bGVzPg0KCQkJCQkJPFZhbGlkYXRpb25SdWxlIG5hbWU9ImZsb2F0bGltaXRzIiBtaW49IjEwMCIgbWF4PSIxMDAwIiBmaWVsZD0iZmxkX0xMZW5ndGgiLz4NCgkJCQkJPC9WYWxpZGF0aW9uUnVsZXM+DQoJCQkJPC9Qcm9kdWN0Pg0KCQkJCTxQcm9kdWN0IG5hbWU9IlBhbGwiIGNvbmNlcHRpZD0iNzA4IiBjb21tZW50PSJHQiIgcm Fuaz0iNTAiPg0KCQkJCQk8UG9zdGNvZGVWYWxpZGF0aW9ucz4NCgkJCQkJCTxQb3N0Y29kZVZhbGlkYXRpb24gY291bnRyeT0iTk8iIGV4Y2x1ZGU9IjAiIHR5cGU9Ik5PIj4NCgkJCQkJCQk8UmFuZ2UgbWluPSIwNTU1IiBtYXg9IiIvPg0KCQkJCQkJPC9Qb3N0Y29kZVZhbGlkYXRpb24+DQoJCQkJCTwvUG9zdGNvZGVWYWxpZGF0aW9ucz4NCgkJCQkJPFZhbGlkYXRpb25SdWxlcz4NCgkJCQkJCTxWYWxpZGF0aW9uUnVsZSBuYW1lPSJjb3VudHJ5IiBhbGxvd2NvdW50cmllcz0iTk8iIGZpZWxkPSJmbGRfQWRyQ291bnRyeSIvPg0KCQkJCQk8L1ZhbGlkYXRpb25SdWxlcz4NCgkJCQk8L1Byb2R1Y3Q+DQoJCQk8L1Byb2R1Y3RzPg0KCQkJPEFsbG9jYXRpb25SdWxlcz4NCgkJCQk8QWxsb2NhdGlvblJ1bGUgdHlwZT0iaGlnaGVzdHJhbmsiLz4NCgkJCTwvQWxsb2NhdGlvblJ1bGVzPg0KCQk8L1NlcnZpY2VMZXZlbD4NCgk8L1NlcnZpY2VMZXZlbHM+DQo8L0NTUj4NCg&quot; } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDShippingRulesPost($actorID, $body = null)
    {
        $this->shipServerActorIDShippingRulesPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDShippingRulesPostWithHttpInfo
     *
     * Save shipping rules
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;ShippingRules&quot;: &quot;PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxDU1I+DQoJPFNlcnZpY2VMZXZlbHM+DQoJCTxTZXJ2aWNlTGV2ZWwgbmFtZT0iU3RhbmRhcmQiPg0KCQkJPFByb2R1Y3RzPg0KCQkJCTxQcm9kdWN0IG5hbWU9IkJ1ZCIgY29uY2VwdGlkPSI3MDYiIGNvbW1lbnQ9IkdCIiByYW5rPSIxMDAiPg0KCQkJCQk8VmFsaWRhdGlvblJ1bGVzPg0KCQkJCQkJPFZhbGlkYXRpb25SdWxlIG5hbWU9ImZsb2F0bGltaXRzIiBtaW49IjEwMCIgbWF4PSIxMDAwIiBmaWVsZD0iZmxkX0xMZW5ndGgiLz4NCgkJCQkJPC9WYWxpZGF0aW9uUnVsZXM+DQoJCQkJPC9Qcm9kdWN0Pg0KCQkJCTxQcm9kdWN0IG5hbWU9IlBhbGwiIGNvbmNlcHRpZD0iNzA4IiBjb21tZW50PSJHQiIgcm Fuaz0iNTAiPg0KCQkJCQk8UG9zdGNvZGVWYWxpZGF0aW9ucz4NCgkJCQkJCTxQb3N0Y29kZVZhbGlkYXRpb24gY291bnRyeT0iTk8iIGV4Y2x1ZGU9IjAiIHR5cGU9Ik5PIj4NCgkJCQkJCQk8UmFuZ2UgbWluPSIwNTU1IiBtYXg9IiIvPg0KCQkJCQkJPC9Qb3N0Y29kZVZhbGlkYXRpb24+DQoJCQkJCTwvUG9zdGNvZGVWYWxpZGF0aW9ucz4NCgkJCQkJPFZhbGlkYXRpb25SdWxlcz4NCgkJCQkJCTxWYWxpZGF0aW9uUnVsZSBuYW1lPSJjb3VudHJ5IiBhbGxvd2NvdW50cmllcz0iTk8iIGZpZWxkPSJmbGRfQWRyQ291bnRyeSIvPg0KCQkJCQk8L1ZhbGlkYXRpb25SdWxlcz4NCgkJCQk8L1Byb2R1Y3Q+DQoJCQk8L1Byb2R1Y3RzPg0KCQkJPEFsbG9jYXRpb25SdWxlcz4NCgkJCQk8QWxsb2NhdGlvblJ1bGUgdHlwZT0iaGlnaGVzdHJhbmsiLz4NCgkJCTwvQWxsb2NhdGlvblJ1bGVzPg0KCQk8L1NlcnZpY2VMZXZlbD4NCgk8L1NlcnZpY2VMZXZlbHM+DQo8L0NTUj4NCg&quot; } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDShippingRulesPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShippingRulesPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDShippingRulesPostAsync
     *
     * Save shipping rules
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;ShippingRules&quot;: &quot;PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxDU1I+DQoJPFNlcnZpY2VMZXZlbHM+DQoJCTxTZXJ2aWNlTGV2ZWwgbmFtZT0iU3RhbmRhcmQiPg0KCQkJPFByb2R1Y3RzPg0KCQkJCTxQcm9kdWN0IG5hbWU9IkJ1ZCIgY29uY2VwdGlkPSI3MDYiIGNvbW1lbnQ9IkdCIiByYW5rPSIxMDAiPg0KCQkJCQk8VmFsaWRhdGlvblJ1bGVzPg0KCQkJCQkJPFZhbGlkYXRpb25SdWxlIG5hbWU9ImZsb2F0bGltaXRzIiBtaW49IjEwMCIgbWF4PSIxMDAwIiBmaWVsZD0iZmxkX0xMZW5ndGgiLz4NCgkJCQkJPC9WYWxpZGF0aW9uUnVsZXM+DQoJCQkJPC9Qcm9kdWN0Pg0KCQkJCTxQcm9kdWN0IG5hbWU9IlBhbGwiIGNvbmNlcHRpZD0iNzA4IiBjb21tZW50PSJHQiIgcm Fuaz0iNTAiPg0KCQkJCQk8UG9zdGNvZGVWYWxpZGF0aW9ucz4NCgkJCQkJCTxQb3N0Y29kZVZhbGlkYXRpb24gY291bnRyeT0iTk8iIGV4Y2x1ZGU9IjAiIHR5cGU9Ik5PIj4NCgkJCQkJCQk8UmFuZ2UgbWluPSIwNTU1IiBtYXg9IiIvPg0KCQkJCQkJPC9Qb3N0Y29kZVZhbGlkYXRpb24+DQoJCQkJCTwvUG9zdGNvZGVWYWxpZGF0aW9ucz4NCgkJCQkJPFZhbGlkYXRpb25SdWxlcz4NCgkJCQkJCTxWYWxpZGF0aW9uUnVsZSBuYW1lPSJjb3VudHJ5IiBhbGxvd2NvdW50cmllcz0iTk8iIGZpZWxkPSJmbGRfQWRyQ291bnRyeSIvPg0KCQkJCQk8L1ZhbGlkYXRpb25SdWxlcz4NCgkJCQk8L1Byb2R1Y3Q+DQoJCQk8L1Byb2R1Y3RzPg0KCQkJPEFsbG9jYXRpb25SdWxlcz4NCgkJCQk8QWxsb2NhdGlvblJ1bGUgdHlwZT0iaGlnaGVzdHJhbmsiLz4NCgkJCTwvQWxsb2NhdGlvblJ1bGVzPg0KCQk8L1NlcnZpY2VMZXZlbD4NCgk8L1NlcnZpY2VMZXZlbHM+DQo8L0NTUj4NCg&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShippingRulesPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDShippingRulesPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDShippingRulesPostAsyncWithHttpInfo
     *
     * Save shipping rules
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;ShippingRules&quot;: &quot;PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxDU1I+DQoJPFNlcnZpY2VMZXZlbHM+DQoJCTxTZXJ2aWNlTGV2ZWwgbmFtZT0iU3RhbmRhcmQiPg0KCQkJPFByb2R1Y3RzPg0KCQkJCTxQcm9kdWN0IG5hbWU9IkJ1ZCIgY29uY2VwdGlkPSI3MDYiIGNvbW1lbnQ9IkdCIiByYW5rPSIxMDAiPg0KCQkJCQk8VmFsaWRhdGlvblJ1bGVzPg0KCQkJCQkJPFZhbGlkYXRpb25SdWxlIG5hbWU9ImZsb2F0bGltaXRzIiBtaW49IjEwMCIgbWF4PSIxMDAwIiBmaWVsZD0iZmxkX0xMZW5ndGgiLz4NCgkJCQkJPC9WYWxpZGF0aW9uUnVsZXM+DQoJCQkJPC9Qcm9kdWN0Pg0KCQkJCTxQcm9kdWN0IG5hbWU9IlBhbGwiIGNvbmNlcHRpZD0iNzA4IiBjb21tZW50PSJHQiIgcm Fuaz0iNTAiPg0KCQkJCQk8UG9zdGNvZGVWYWxpZGF0aW9ucz4NCgkJCQkJCTxQb3N0Y29kZVZhbGlkYXRpb24gY291bnRyeT0iTk8iIGV4Y2x1ZGU9IjAiIHR5cGU9Ik5PIj4NCgkJCQkJCQk8UmFuZ2UgbWluPSIwNTU1IiBtYXg9IiIvPg0KCQkJCQkJPC9Qb3N0Y29kZVZhbGlkYXRpb24+DQoJCQkJCTwvUG9zdGNvZGVWYWxpZGF0aW9ucz4NCgkJCQkJPFZhbGlkYXRpb25SdWxlcz4NCgkJCQkJCTxWYWxpZGF0aW9uUnVsZSBuYW1lPSJjb3VudHJ5IiBhbGxvd2NvdW50cmllcz0iTk8iIGZpZWxkPSJmbGRfQWRyQ291bnRyeSIvPg0KCQkJCQk8L1ZhbGlkYXRpb25SdWxlcz4NCgkJCQk8L1Byb2R1Y3Q+DQoJCQk8L1Byb2R1Y3RzPg0KCQkJPEFsbG9jYXRpb25SdWxlcz4NCgkJCQk8QWxsb2NhdGlvblJ1bGUgdHlwZT0iaGlnaGVzdHJhbmsiLz4NCgkJCTwvQWxsb2NhdGlvblJ1bGVzPg0KCQk8L1NlcnZpY2VMZXZlbD4NCgk8L1NlcnZpY2VMZXZlbHM+DQo8L0NTUj4NCg&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDShippingRulesPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDShippingRulesPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDShippingRulesPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;ShippingRules&quot;: &quot;PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxDU1I+DQoJPFNlcnZpY2VMZXZlbHM+DQoJCTxTZXJ2aWNlTGV2ZWwgbmFtZT0iU3RhbmRhcmQiPg0KCQkJPFByb2R1Y3RzPg0KCQkJCTxQcm9kdWN0IG5hbWU9IkJ1ZCIgY29uY2VwdGlkPSI3MDYiIGNvbW1lbnQ9IkdCIiByYW5rPSIxMDAiPg0KCQkJCQk8VmFsaWRhdGlvblJ1bGVzPg0KCQkJCQkJPFZhbGlkYXRpb25SdWxlIG5hbWU9ImZsb2F0bGltaXRzIiBtaW49IjEwMCIgbWF4PSIxMDAwIiBmaWVsZD0iZmxkX0xMZW5ndGgiLz4NCgkJCQkJPC9WYWxpZGF0aW9uUnVsZXM+DQoJCQkJPC9Qcm9kdWN0Pg0KCQkJCTxQcm9kdWN0IG5hbWU9IlBhbGwiIGNvbmNlcHRpZD0iNzA4IiBjb21tZW50PSJHQiIgcm Fuaz0iNTAiPg0KCQkJCQk8UG9zdGNvZGVWYWxpZGF0aW9ucz4NCgkJCQkJCTxQb3N0Y29kZVZhbGlkYXRpb24gY291bnRyeT0iTk8iIGV4Y2x1ZGU9IjAiIHR5cGU9Ik5PIj4NCgkJCQkJCQk8UmFuZ2UgbWluPSIwNTU1IiBtYXg9IiIvPg0KCQkJCQkJPC9Qb3N0Y29kZVZhbGlkYXRpb24+DQoJCQkJCTwvUG9zdGNvZGVWYWxpZGF0aW9ucz4NCgkJCQkJPFZhbGlkYXRpb25SdWxlcz4NCgkJCQkJCTxWYWxpZGF0aW9uUnVsZSBuYW1lPSJjb3VudHJ5IiBhbGxvd2NvdW50cmllcz0iTk8iIGZpZWxkPSJmbGRfQWRyQ291bnRyeSIvPg0KCQkJCQk8L1ZhbGlkYXRpb25SdWxlcz4NCgkJCQk8L1Byb2R1Y3Q+DQoJCQk8L1Byb2R1Y3RzPg0KCQkJPEFsbG9jYXRpb25SdWxlcz4NCgkJCQk8QWxsb2NhdGlvblJ1bGUgdHlwZT0iaGlnaGVzdHJhbmsiLz4NCgkJCTwvQWxsb2NhdGlvblJ1bGVzPg0KCQk8L1NlcnZpY2VMZXZlbD4NCgk8L1NlcnZpY2VMZXZlbHM+DQo8L0NTUj4NCg&quot; } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDShippingRulesPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDShippingRulesPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/shippingRules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDStacksGet
     *
     * Get stacks
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDStacksGet($actorID)
    {
        $this->shipServerActorIDStacksGetWithHttpInfo($actorID);
    }

    /**
     * Operation shipServerActorIDStacksGetWithHttpInfo
     *
     * Get stacks
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDStacksGetWithHttpInfo($actorID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDStacksGetRequest($actorID);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDStacksGetAsync
     *
     * Get stacks
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDStacksGetAsync($actorID)
    {
        return $this->shipServerActorIDStacksGetAsyncWithHttpInfo($actorID)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDStacksGetAsyncWithHttpInfo
     *
     * Get stacks
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDStacksGetAsyncWithHttpInfo($actorID)
    {
        $returnType = '';
        $request = $this->shipServerActorIDStacksGetRequest($actorID);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDStacksGet'
     *
     * @param  int $actorID Actor ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDStacksGetRequest($actorID)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDStacksGet'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/stacks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDStacksPost
     *
     * Create stack
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;StackName&quot;: &quot;TestStack&quot;, &quot;SubcarrierConceptID&quot;: 22},&quot;options&quot;: {}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDStacksPost($actorID, $body = null)
    {
        $this->shipServerActorIDStacksPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDStacksPostWithHttpInfo
     *
     * Create stack
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;StackName&quot;: &quot;TestStack&quot;, &quot;SubcarrierConceptID&quot;: 22},&quot;options&quot;: {}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDStacksPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDStacksPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDStacksPostAsync
     *
     * Create stack
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;StackName&quot;: &quot;TestStack&quot;, &quot;SubcarrierConceptID&quot;: 22},&quot;options&quot;: {}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDStacksPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDStacksPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDStacksPostAsyncWithHttpInfo
     *
     * Create stack
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;StackName&quot;: &quot;TestStack&quot;, &quot;SubcarrierConceptID&quot;: 22},&quot;options&quot;: {}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDStacksPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDStacksPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDStacksPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;StackName&quot;: &quot;TestStack&quot;, &quot;SubcarrierConceptID&quot;: 22},&quot;options&quot;: {}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDStacksPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDStacksPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/stacks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDStacksShipmentsPatch
     *
     * Move shipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PATCH: {&quot;data&quot;:{&quot;StackCSID&quot;:156,&quot;ShipmentTags&quot;:[&quot;6D48DB14-5DA2-40EB-9383-FFDDE6347F4F&quot;]},&quot;options&quot;:{}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDStacksShipmentsPatch($actorID, $body = null)
    {
        $this->shipServerActorIDStacksShipmentsPatchWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDStacksShipmentsPatchWithHttpInfo
     *
     * Move shipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PATCH: {&quot;data&quot;:{&quot;StackCSID&quot;:156,&quot;ShipmentTags&quot;:[&quot;6D48DB14-5DA2-40EB-9383-FFDDE6347F4F&quot;]},&quot;options&quot;:{}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDStacksShipmentsPatchWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDStacksShipmentsPatchRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDStacksShipmentsPatchAsync
     *
     * Move shipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PATCH: {&quot;data&quot;:{&quot;StackCSID&quot;:156,&quot;ShipmentTags&quot;:[&quot;6D48DB14-5DA2-40EB-9383-FFDDE6347F4F&quot;]},&quot;options&quot;:{}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDStacksShipmentsPatchAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDStacksShipmentsPatchAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDStacksShipmentsPatchAsyncWithHttpInfo
     *
     * Move shipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PATCH: {&quot;data&quot;:{&quot;StackCSID&quot;:156,&quot;ShipmentTags&quot;:[&quot;6D48DB14-5DA2-40EB-9383-FFDDE6347F4F&quot;]},&quot;options&quot;:{}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDStacksShipmentsPatchAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDStacksShipmentsPatchRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDStacksShipmentsPatch'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request PATCH: {&quot;data&quot;:{&quot;StackCSID&quot;:156,&quot;ShipmentTags&quot;:[&quot;6D48DB14-5DA2-40EB-9383-FFDDE6347F4F&quot;]},&quot;options&quot;:{}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDStacksShipmentsPatchRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDStacksShipmentsPatch'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/stacks/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDStacksShipmentsPost
     *
     * Get stackshipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot; : {&quot;StackCSID&quot;: 133}} or {&quot;data&quot; : {&quot;SubcarrierCSID&quot;: 12}} or {&quot;data&quot; : {&quot;CarrierCSID&quot;: 22}} see doc in link (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDStacksShipmentsPost($actorID, $body = null)
    {
        $this->shipServerActorIDStacksShipmentsPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDStacksShipmentsPostWithHttpInfo
     *
     * Get stackshipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot; : {&quot;StackCSID&quot;: 133}} or {&quot;data&quot; : {&quot;SubcarrierCSID&quot;: 12}} or {&quot;data&quot; : {&quot;CarrierCSID&quot;: 22}} see doc in link (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDStacksShipmentsPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDStacksShipmentsPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDStacksShipmentsPostAsync
     *
     * Get stackshipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot; : {&quot;StackCSID&quot;: 133}} or {&quot;data&quot; : {&quot;SubcarrierCSID&quot;: 12}} or {&quot;data&quot; : {&quot;CarrierCSID&quot;: 22}} see doc in link (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDStacksShipmentsPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDStacksShipmentsPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDStacksShipmentsPostAsyncWithHttpInfo
     *
     * Get stackshipments
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot; : {&quot;StackCSID&quot;: 133}} or {&quot;data&quot; : {&quot;SubcarrierCSID&quot;: 12}} or {&quot;data&quot; : {&quot;CarrierCSID&quot;: 22}} see doc in link (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDStacksShipmentsPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDStacksShipmentsPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDStacksShipmentsPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot; : {&quot;StackCSID&quot;: 133}} or {&quot;data&quot; : {&quot;SubcarrierCSID&quot;: 12}} or {&quot;data&quot; : {&quot;CarrierCSID&quot;: 22}} see doc in link (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDStacksShipmentsPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDStacksShipmentsPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/stacks/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDStacksStackIDDelete
     *
     * Delete stack
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $stackID Stack ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDStacksStackIDDelete($actorID, $stackID, $body = null)
    {
        $this->shipServerActorIDStacksStackIDDeleteWithHttpInfo($actorID, $stackID, $body);
    }

    /**
     * Operation shipServerActorIDStacksStackIDDeleteWithHttpInfo
     *
     * Delete stack
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $stackID Stack ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDStacksStackIDDeleteWithHttpInfo($actorID, $stackID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDStacksStackIDDeleteRequest($actorID, $stackID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDStacksStackIDDeleteAsync
     *
     * Delete stack
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $stackID Stack ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDStacksStackIDDeleteAsync($actorID, $stackID, $body = null)
    {
        return $this->shipServerActorIDStacksStackIDDeleteAsyncWithHttpInfo($actorID, $stackID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDStacksStackIDDeleteAsyncWithHttpInfo
     *
     * Delete stack
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $stackID Stack ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDStacksStackIDDeleteAsyncWithHttpInfo($actorID, $stackID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDStacksStackIDDeleteRequest($actorID, $stackID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDStacksStackIDDelete'
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $stackID Stack ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Can be empty (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDStacksStackIDDeleteRequest($actorID, $stackID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDStacksStackIDDelete'
            );
        }
        // verify the required parameter 'stackID' is set
        if ($stackID === null || (is_array($stackID) && count($stackID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stackID when calling shipServerActorIDStacksStackIDDelete'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/stacks/{stackID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($stackID !== null) {
            $resourcePath = str_replace(
                '{' . 'stackID' . '}',
                ObjectSerializer::toPathValue($stackID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDStacksStackIDManifestPut
     *
     * Transmit stack
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $stackID Stack ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;StackCSID&quot;: &quot;36437&quot; }} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDStacksStackIDManifestPut($actorID, $stackID, $body = null)
    {
        $this->shipServerActorIDStacksStackIDManifestPutWithHttpInfo($actorID, $stackID, $body);
    }

    /**
     * Operation shipServerActorIDStacksStackIDManifestPutWithHttpInfo
     *
     * Transmit stack
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $stackID Stack ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;StackCSID&quot;: &quot;36437&quot; }} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDStacksStackIDManifestPutWithHttpInfo($actorID, $stackID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDStacksStackIDManifestPutRequest($actorID, $stackID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDStacksStackIDManifestPutAsync
     *
     * Transmit stack
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $stackID Stack ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;StackCSID&quot;: &quot;36437&quot; }} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDStacksStackIDManifestPutAsync($actorID, $stackID, $body = null)
    {
        return $this->shipServerActorIDStacksStackIDManifestPutAsyncWithHttpInfo($actorID, $stackID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDStacksStackIDManifestPutAsyncWithHttpInfo
     *
     * Transmit stack
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $stackID Stack ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;StackCSID&quot;: &quot;36437&quot; }} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDStacksStackIDManifestPutAsyncWithHttpInfo($actorID, $stackID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDStacksStackIDManifestPutRequest($actorID, $stackID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDStacksStackIDManifestPut'
     *
     * @param  int $actorID Actor ID (required)
     * @param  int $stackID Stack ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: { &quot;data&quot;: { &quot;StackCSID&quot;: &quot;36437&quot; }} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDStacksStackIDManifestPutRequest($actorID, $stackID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDStacksStackIDManifestPut'
            );
        }
        // verify the required parameter 'stackID' is set
        if ($stackID === null || (is_array($stackID) && count($stackID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stackID when calling shipServerActorIDStacksStackIDManifestPut'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/stacks/{stackID}/manifest';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }
        // path params
        if ($stackID !== null) {
            $resourcePath = str_replace(
                '{' . 'stackID' . '}',
                ObjectSerializer::toPathValue($stackID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDSubmitOrderPost
     *
     * Submit order
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:1,&quot;ShpCSID&quot;:524,&quot;OrderNo&quot;:&quot;772157949528&quot;,&quot;Lines&quot;:[{&quot;Length&quot;:150,&quot;Height&quot;:100,&quot;PkgWeight&quot;:130,&quot;Width&quot;:100,&quot;PkgVol&quot;:1500000,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1,&quot;PkgNo&quot;:&quot;&quot;}]}],&quot;DetailGroups&quot;:[{&quot;GroupID&quot;:1,&quot;Rows&quot;:[{&quot;GoodsLineNo&quot;:1,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;2102421501404NYE460&quot;},{&quot;KindID&quot;:2,&quot;Value&quot;:&quot;4.24&quot;},{&quot;KindID&quot;:4,&quot;Value&quot;:&quot;CN&quot;},{&quot;KindID&quot;:5,&quot;Value&quot;:&quot;1&quot;},{&quot;KindID&quot;:6,&quot;Value&quot;:&quot;.13&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;VL TONAL EMBROIDERY ENTRY TEE&quot;},{&quot;KindID&quot;:9,&quot;Value&quot;:&quot;1&quot;},{&quot;KindID&quot;:10,&quot;Value&quot;:&quot;34.99&quot;},{&quot;KindID&quot;:17,&quot;Value&quot;:&quot;EUR&quot;},{&quot;KindID&quot;:18,&quot;Value&quot;:&quot;6109100010&quot;},{&quot;KindID&quot;:186,&quot;Value&quot;:&quot;T.SHIRT&quot;},{&quot;KindID&quot;:192,&quot;Value&quot;:&quot;N&quot;}]}]}],&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;AutoReceiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0360&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;POPostCode&quot;:&quot;0580&quot;,&quot;POCity&quot;:&quot;OSLO&quot;,&quot;Phone&quot;:&quot;67 06 49 91&quot;,&quot;Mobile&quot;:&quot;12341234&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;ContactCSID&quot;:5299935,&quot;Fax&quot;:&quot;67 06 49 92&quot;,&quot;CountryCode&quot;:&quot;NO&quot;,&quot;Country&quot;:&quot;NORWAY&quot;,&quot;CountryCodeISO3&quot;:&quot;NOR&quot;,&quot;CountryISOID&quot;:578}],&quot;References&quot;:[{&quot;Kind&quot;:7,&quot;Value&quot;:&quot;ECOM12364313&quot;}]},&quot;options&quot;:{&quot;ReturnShipmentServiceLevel&quot;:&quot;Return&quot;,&quot;Labels&quot;:&quot;PNG&quot;,&quot;UseCopy&quot;:0,&quot;Visibility&quot;:&quot;extended&quot;,&quot;ReturnShipmentFirst&quot;:0}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDSubmitOrderPost($actorID, $body = null)
    {
        $this->shipServerActorIDSubmitOrderPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDSubmitOrderPostWithHttpInfo
     *
     * Submit order
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:1,&quot;ShpCSID&quot;:524,&quot;OrderNo&quot;:&quot;772157949528&quot;,&quot;Lines&quot;:[{&quot;Length&quot;:150,&quot;Height&quot;:100,&quot;PkgWeight&quot;:130,&quot;Width&quot;:100,&quot;PkgVol&quot;:1500000,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1,&quot;PkgNo&quot;:&quot;&quot;}]}],&quot;DetailGroups&quot;:[{&quot;GroupID&quot;:1,&quot;Rows&quot;:[{&quot;GoodsLineNo&quot;:1,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;2102421501404NYE460&quot;},{&quot;KindID&quot;:2,&quot;Value&quot;:&quot;4.24&quot;},{&quot;KindID&quot;:4,&quot;Value&quot;:&quot;CN&quot;},{&quot;KindID&quot;:5,&quot;Value&quot;:&quot;1&quot;},{&quot;KindID&quot;:6,&quot;Value&quot;:&quot;.13&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;VL TONAL EMBROIDERY ENTRY TEE&quot;},{&quot;KindID&quot;:9,&quot;Value&quot;:&quot;1&quot;},{&quot;KindID&quot;:10,&quot;Value&quot;:&quot;34.99&quot;},{&quot;KindID&quot;:17,&quot;Value&quot;:&quot;EUR&quot;},{&quot;KindID&quot;:18,&quot;Value&quot;:&quot;6109100010&quot;},{&quot;KindID&quot;:186,&quot;Value&quot;:&quot;T.SHIRT&quot;},{&quot;KindID&quot;:192,&quot;Value&quot;:&quot;N&quot;}]}]}],&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;AutoReceiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0360&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;POPostCode&quot;:&quot;0580&quot;,&quot;POCity&quot;:&quot;OSLO&quot;,&quot;Phone&quot;:&quot;67 06 49 91&quot;,&quot;Mobile&quot;:&quot;12341234&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;ContactCSID&quot;:5299935,&quot;Fax&quot;:&quot;67 06 49 92&quot;,&quot;CountryCode&quot;:&quot;NO&quot;,&quot;Country&quot;:&quot;NORWAY&quot;,&quot;CountryCodeISO3&quot;:&quot;NOR&quot;,&quot;CountryISOID&quot;:578}],&quot;References&quot;:[{&quot;Kind&quot;:7,&quot;Value&quot;:&quot;ECOM12364313&quot;}]},&quot;options&quot;:{&quot;ReturnShipmentServiceLevel&quot;:&quot;Return&quot;,&quot;Labels&quot;:&quot;PNG&quot;,&quot;UseCopy&quot;:0,&quot;Visibility&quot;:&quot;extended&quot;,&quot;ReturnShipmentFirst&quot;:0}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDSubmitOrderPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDSubmitOrderPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDSubmitOrderPostAsync
     *
     * Submit order
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:1,&quot;ShpCSID&quot;:524,&quot;OrderNo&quot;:&quot;772157949528&quot;,&quot;Lines&quot;:[{&quot;Length&quot;:150,&quot;Height&quot;:100,&quot;PkgWeight&quot;:130,&quot;Width&quot;:100,&quot;PkgVol&quot;:1500000,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1,&quot;PkgNo&quot;:&quot;&quot;}]}],&quot;DetailGroups&quot;:[{&quot;GroupID&quot;:1,&quot;Rows&quot;:[{&quot;GoodsLineNo&quot;:1,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;2102421501404NYE460&quot;},{&quot;KindID&quot;:2,&quot;Value&quot;:&quot;4.24&quot;},{&quot;KindID&quot;:4,&quot;Value&quot;:&quot;CN&quot;},{&quot;KindID&quot;:5,&quot;Value&quot;:&quot;1&quot;},{&quot;KindID&quot;:6,&quot;Value&quot;:&quot;.13&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;VL TONAL EMBROIDERY ENTRY TEE&quot;},{&quot;KindID&quot;:9,&quot;Value&quot;:&quot;1&quot;},{&quot;KindID&quot;:10,&quot;Value&quot;:&quot;34.99&quot;},{&quot;KindID&quot;:17,&quot;Value&quot;:&quot;EUR&quot;},{&quot;KindID&quot;:18,&quot;Value&quot;:&quot;6109100010&quot;},{&quot;KindID&quot;:186,&quot;Value&quot;:&quot;T.SHIRT&quot;},{&quot;KindID&quot;:192,&quot;Value&quot;:&quot;N&quot;}]}]}],&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;AutoReceiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0360&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;POPostCode&quot;:&quot;0580&quot;,&quot;POCity&quot;:&quot;OSLO&quot;,&quot;Phone&quot;:&quot;67 06 49 91&quot;,&quot;Mobile&quot;:&quot;12341234&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;ContactCSID&quot;:5299935,&quot;Fax&quot;:&quot;67 06 49 92&quot;,&quot;CountryCode&quot;:&quot;NO&quot;,&quot;Country&quot;:&quot;NORWAY&quot;,&quot;CountryCodeISO3&quot;:&quot;NOR&quot;,&quot;CountryISOID&quot;:578}],&quot;References&quot;:[{&quot;Kind&quot;:7,&quot;Value&quot;:&quot;ECOM12364313&quot;}]},&quot;options&quot;:{&quot;ReturnShipmentServiceLevel&quot;:&quot;Return&quot;,&quot;Labels&quot;:&quot;PNG&quot;,&quot;UseCopy&quot;:0,&quot;Visibility&quot;:&quot;extended&quot;,&quot;ReturnShipmentFirst&quot;:0}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDSubmitOrderPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDSubmitOrderPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDSubmitOrderPostAsyncWithHttpInfo
     *
     * Submit order
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:1,&quot;ShpCSID&quot;:524,&quot;OrderNo&quot;:&quot;772157949528&quot;,&quot;Lines&quot;:[{&quot;Length&quot;:150,&quot;Height&quot;:100,&quot;PkgWeight&quot;:130,&quot;Width&quot;:100,&quot;PkgVol&quot;:1500000,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1,&quot;PkgNo&quot;:&quot;&quot;}]}],&quot;DetailGroups&quot;:[{&quot;GroupID&quot;:1,&quot;Rows&quot;:[{&quot;GoodsLineNo&quot;:1,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;2102421501404NYE460&quot;},{&quot;KindID&quot;:2,&quot;Value&quot;:&quot;4.24&quot;},{&quot;KindID&quot;:4,&quot;Value&quot;:&quot;CN&quot;},{&quot;KindID&quot;:5,&quot;Value&quot;:&quot;1&quot;},{&quot;KindID&quot;:6,&quot;Value&quot;:&quot;.13&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;VL TONAL EMBROIDERY ENTRY TEE&quot;},{&quot;KindID&quot;:9,&quot;Value&quot;:&quot;1&quot;},{&quot;KindID&quot;:10,&quot;Value&quot;:&quot;34.99&quot;},{&quot;KindID&quot;:17,&quot;Value&quot;:&quot;EUR&quot;},{&quot;KindID&quot;:18,&quot;Value&quot;:&quot;6109100010&quot;},{&quot;KindID&quot;:186,&quot;Value&quot;:&quot;T.SHIRT&quot;},{&quot;KindID&quot;:192,&quot;Value&quot;:&quot;N&quot;}]}]}],&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;AutoReceiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0360&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;POPostCode&quot;:&quot;0580&quot;,&quot;POCity&quot;:&quot;OSLO&quot;,&quot;Phone&quot;:&quot;67 06 49 91&quot;,&quot;Mobile&quot;:&quot;12341234&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;ContactCSID&quot;:5299935,&quot;Fax&quot;:&quot;67 06 49 92&quot;,&quot;CountryCode&quot;:&quot;NO&quot;,&quot;Country&quot;:&quot;NORWAY&quot;,&quot;CountryCodeISO3&quot;:&quot;NOR&quot;,&quot;CountryISOID&quot;:578}],&quot;References&quot;:[{&quot;Kind&quot;:7,&quot;Value&quot;:&quot;ECOM12364313&quot;}]},&quot;options&quot;:{&quot;ReturnShipmentServiceLevel&quot;:&quot;Return&quot;,&quot;Labels&quot;:&quot;PNG&quot;,&quot;UseCopy&quot;:0,&quot;Visibility&quot;:&quot;extended&quot;,&quot;ReturnShipmentFirst&quot;:0}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDSubmitOrderPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDSubmitOrderPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDSubmitOrderPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Kind&quot;:1,&quot;ShpCSID&quot;:524,&quot;OrderNo&quot;:&quot;772157949528&quot;,&quot;Lines&quot;:[{&quot;Length&quot;:150,&quot;Height&quot;:100,&quot;PkgWeight&quot;:130,&quot;Width&quot;:100,&quot;PkgVol&quot;:1500000,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:1,&quot;PkgNo&quot;:&quot;&quot;}]}],&quot;DetailGroups&quot;:[{&quot;GroupID&quot;:1,&quot;Rows&quot;:[{&quot;GoodsLineNo&quot;:1,&quot;Details&quot;:[{&quot;KindID&quot;:1,&quot;Value&quot;:&quot;2102421501404NYE460&quot;},{&quot;KindID&quot;:2,&quot;Value&quot;:&quot;4.24&quot;},{&quot;KindID&quot;:4,&quot;Value&quot;:&quot;CN&quot;},{&quot;KindID&quot;:5,&quot;Value&quot;:&quot;1&quot;},{&quot;KindID&quot;:6,&quot;Value&quot;:&quot;.13&quot;},{&quot;KindID&quot;:7,&quot;Value&quot;:&quot;VL TONAL EMBROIDERY ENTRY TEE&quot;},{&quot;KindID&quot;:9,&quot;Value&quot;:&quot;1&quot;},{&quot;KindID&quot;:10,&quot;Value&quot;:&quot;34.99&quot;},{&quot;KindID&quot;:17,&quot;Value&quot;:&quot;EUR&quot;},{&quot;KindID&quot;:18,&quot;Value&quot;:&quot;6109100010&quot;},{&quot;KindID&quot;:186,&quot;Value&quot;:&quot;T.SHIRT&quot;},{&quot;KindID&quot;:192,&quot;Value&quot;:&quot;N&quot;}]}]}],&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;AutoReceiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0360&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;POPostCode&quot;:&quot;0580&quot;,&quot;POCity&quot;:&quot;OSLO&quot;,&quot;Phone&quot;:&quot;67 06 49 91&quot;,&quot;Mobile&quot;:&quot;12341234&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;ContactCSID&quot;:5299935,&quot;Fax&quot;:&quot;67 06 49 92&quot;,&quot;CountryCode&quot;:&quot;NO&quot;,&quot;Country&quot;:&quot;NORWAY&quot;,&quot;CountryCodeISO3&quot;:&quot;NOR&quot;,&quot;CountryISOID&quot;:578}],&quot;References&quot;:[{&quot;Kind&quot;:7,&quot;Value&quot;:&quot;ECOM12364313&quot;}]},&quot;options&quot;:{&quot;ReturnShipmentServiceLevel&quot;:&quot;Return&quot;,&quot;Labels&quot;:&quot;PNG&quot;,&quot;UseCopy&quot;:0,&quot;Visibility&quot;:&quot;extended&quot;,&quot;ReturnShipmentFirst&quot;:0}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDSubmitOrderPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDSubmitOrderPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/submitOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDTimeSlotAllocationsPost
     *
     * Time slot allocations
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test Receiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;11848&quot;,&quot;City&quot;:&quot;Göteborg&quot;,&quot;CustNo&quot;:&quot;5&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;ERPRef&quot;:&quot;5&quot;},{&quot;Kind&quot;:10,&quot;Name1&quot;:&quot;Sender Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;43891&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;City&quot;:&quot;Landvetter&quot;,&quot;CustNo&quot;:&quot;3425964&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;Token&quot;:&quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot;,&quot;TimeSlotToken&quot;:&quot;...&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDTimeSlotAllocationsPost($actorID, $body = null)
    {
        $this->shipServerActorIDTimeSlotAllocationsPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDTimeSlotAllocationsPostWithHttpInfo
     *
     * Time slot allocations
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test Receiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;11848&quot;,&quot;City&quot;:&quot;Göteborg&quot;,&quot;CustNo&quot;:&quot;5&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;ERPRef&quot;:&quot;5&quot;},{&quot;Kind&quot;:10,&quot;Name1&quot;:&quot;Sender Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;43891&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;City&quot;:&quot;Landvetter&quot;,&quot;CustNo&quot;:&quot;3425964&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;Token&quot;:&quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot;,&quot;TimeSlotToken&quot;:&quot;...&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDTimeSlotAllocationsPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDTimeSlotAllocationsPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDTimeSlotAllocationsPostAsync
     *
     * Time slot allocations
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test Receiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;11848&quot;,&quot;City&quot;:&quot;Göteborg&quot;,&quot;CustNo&quot;:&quot;5&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;ERPRef&quot;:&quot;5&quot;},{&quot;Kind&quot;:10,&quot;Name1&quot;:&quot;Sender Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;43891&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;City&quot;:&quot;Landvetter&quot;,&quot;CustNo&quot;:&quot;3425964&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;Token&quot;:&quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot;,&quot;TimeSlotToken&quot;:&quot;...&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDTimeSlotAllocationsPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDTimeSlotAllocationsPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDTimeSlotAllocationsPostAsyncWithHttpInfo
     *
     * Time slot allocations
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test Receiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;11848&quot;,&quot;City&quot;:&quot;Göteborg&quot;,&quot;CustNo&quot;:&quot;5&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;ERPRef&quot;:&quot;5&quot;},{&quot;Kind&quot;:10,&quot;Name1&quot;:&quot;Sender Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;43891&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;City&quot;:&quot;Landvetter&quot;,&quot;CustNo&quot;:&quot;3425964&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;Token&quot;:&quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot;,&quot;TimeSlotToken&quot;:&quot;...&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDTimeSlotAllocationsPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDTimeSlotAllocationsPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDTimeSlotAllocationsPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test Receiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;11848&quot;,&quot;City&quot;:&quot;Göteborg&quot;,&quot;CustNo&quot;:&quot;5&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;ERPRef&quot;:&quot;5&quot;},{&quot;Kind&quot;:10,&quot;Name1&quot;:&quot;Sender Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;43891&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;City&quot;:&quot;Landvetter&quot;,&quot;CustNo&quot;:&quot;3425964&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;Token&quot;:&quot;_-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots__&quot;,&quot;TimeSlotToken&quot;:&quot;...&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDTimeSlotAllocationsPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDTimeSlotAllocationsPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/timeSlotAllocations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDTimeSlotsPost
     *
     * Get time slots
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ProdConceptID&quot;:5799,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test &quot;,&quot;Attention&quot;:&quot;Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0580&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;CountryCode&quot;:&quot;NO&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Phone&quot;:&quot;00000000&quot;},{&quot;Kind&quot;:2,&quot;Attention&quot;:&quot;Att Sender&quot;,&quot;Name1&quot;:&quot;Sender for all&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0192&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;EarliestPickup&quot;:&quot;2021-06-16T06:00&quot;,&quot;LatestPickup&quot;:&quot;2021-06-16T21:00&quot;,&quot;TimeLog&quot;:1}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDTimeSlotsPost($actorID, $body = null)
    {
        $this->shipServerActorIDTimeSlotsPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDTimeSlotsPostWithHttpInfo
     *
     * Get time slots
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ProdConceptID&quot;:5799,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test &quot;,&quot;Attention&quot;:&quot;Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0580&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;CountryCode&quot;:&quot;NO&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Phone&quot;:&quot;00000000&quot;},{&quot;Kind&quot;:2,&quot;Attention&quot;:&quot;Att Sender&quot;,&quot;Name1&quot;:&quot;Sender for all&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0192&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;EarliestPickup&quot;:&quot;2021-06-16T06:00&quot;,&quot;LatestPickup&quot;:&quot;2021-06-16T21:00&quot;,&quot;TimeLog&quot;:1}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDTimeSlotsPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDTimeSlotsPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDTimeSlotsPostAsync
     *
     * Get time slots
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ProdConceptID&quot;:5799,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test &quot;,&quot;Attention&quot;:&quot;Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0580&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;CountryCode&quot;:&quot;NO&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Phone&quot;:&quot;00000000&quot;},{&quot;Kind&quot;:2,&quot;Attention&quot;:&quot;Att Sender&quot;,&quot;Name1&quot;:&quot;Sender for all&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0192&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;EarliestPickup&quot;:&quot;2021-06-16T06:00&quot;,&quot;LatestPickup&quot;:&quot;2021-06-16T21:00&quot;,&quot;TimeLog&quot;:1}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDTimeSlotsPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDTimeSlotsPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDTimeSlotsPostAsyncWithHttpInfo
     *
     * Get time slots
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ProdConceptID&quot;:5799,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test &quot;,&quot;Attention&quot;:&quot;Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0580&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;CountryCode&quot;:&quot;NO&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Phone&quot;:&quot;00000000&quot;},{&quot;Kind&quot;:2,&quot;Attention&quot;:&quot;Att Sender&quot;,&quot;Name1&quot;:&quot;Sender for all&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0192&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;EarliestPickup&quot;:&quot;2021-06-16T06:00&quot;,&quot;LatestPickup&quot;:&quot;2021-06-16T21:00&quot;,&quot;TimeLog&quot;:1}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDTimeSlotsPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDTimeSlotsPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDTimeSlotsPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ProdConceptID&quot;:5799,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test &quot;,&quot;Attention&quot;:&quot;Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0580&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;CountryCode&quot;:&quot;NO&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Phone&quot;:&quot;00000000&quot;},{&quot;Kind&quot;:2,&quot;Attention&quot;:&quot;Att Sender&quot;,&quot;Name1&quot;:&quot;Sender for all&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;0192&quot;,&quot;City&quot;:&quot;OSLO&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;CountryCode&quot;:&quot;NO&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;EarliestPickup&quot;:&quot;2021-06-16T06:00&quot;,&quot;LatestPickup&quot;:&quot;2021-06-16T21:00&quot;,&quot;TimeLog&quot;:1}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDTimeSlotsPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDTimeSlotsPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/timeSlots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDValidRoutesPost
     *
     * Check sender/receiver addresses.
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name sender&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; } ] } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDValidRoutesPost($actorID, $body = null)
    {
        $this->shipServerActorIDValidRoutesPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDValidRoutesPostWithHttpInfo
     *
     * Check sender/receiver addresses.
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name sender&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; } ] } } (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDValidRoutesPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDValidRoutesPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDValidRoutesPostAsync
     *
     * Check sender/receiver addresses.
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name sender&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; } ] } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDValidRoutesPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDValidRoutesPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDValidRoutesPostAsyncWithHttpInfo
     *
     * Check sender/receiver addresses.
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name sender&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; } ] } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDValidRoutesPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDValidRoutesPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDValidRoutesPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST:    { &quot;data&quot;: { &quot;Kind&quot;: 1, &quot;ProdConceptID&quot;: 2816, &quot;Addresses&quot;: [ { &quot;Kind&quot;: 1, &quot;Name1&quot;: &quot;Name Receiver&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; }, { &quot;Kind&quot;: 2, &quot;Name1&quot;: &quot;Name sender&quot;, &quot;Street1&quot;: &quot;Street 10&quot;, &quot;PostCode&quot;: &quot;11848&quot;, &quot;City&quot;: &quot;Göteborg&quot;, &quot;Mobile&quot;: &quot;00000000&quot;, &quot;CountryCode&quot;: &quot;SE&quot;, &quot;Email&quot;: &quot;a@noexitingqwerty.nnn&quot; } ] } } (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDValidRoutesPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDValidRoutesPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/validRoutes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDVoidTimeSlotPost
     *
     * Void Time slot
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ProdCSID&quot;:113,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test Receiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;11848&quot;,&quot;City&quot;:&quot;Göteborg&quot;,&quot;CustNo&quot;:&quot;5&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;ERPRef&quot;:&quot;5&quot;},{&quot;Kind&quot;:10,&quot;Name1&quot;:&quot;Sender Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;43891&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;City&quot;:&quot;Landvetter&quot;,&quot;CustNo&quot;:&quot;3425964&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;Token&quot;:&quot;-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots_&quot;,&quot;AllocatedTimeSlotToken&quot;:&quot;...&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDVoidTimeSlotPost($actorID, $body = null)
    {
        $this->shipServerActorIDVoidTimeSlotPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDVoidTimeSlotPostWithHttpInfo
     *
     * Void Time slot
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ProdCSID&quot;:113,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test Receiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;11848&quot;,&quot;City&quot;:&quot;Göteborg&quot;,&quot;CustNo&quot;:&quot;5&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;ERPRef&quot;:&quot;5&quot;},{&quot;Kind&quot;:10,&quot;Name1&quot;:&quot;Sender Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;43891&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;City&quot;:&quot;Landvetter&quot;,&quot;CustNo&quot;:&quot;3425964&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;Token&quot;:&quot;-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots_&quot;,&quot;AllocatedTimeSlotToken&quot;:&quot;...&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDVoidTimeSlotPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDVoidTimeSlotPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDVoidTimeSlotPostAsync
     *
     * Void Time slot
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ProdCSID&quot;:113,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test Receiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;11848&quot;,&quot;City&quot;:&quot;Göteborg&quot;,&quot;CustNo&quot;:&quot;5&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;ERPRef&quot;:&quot;5&quot;},{&quot;Kind&quot;:10,&quot;Name1&quot;:&quot;Sender Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;43891&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;City&quot;:&quot;Landvetter&quot;,&quot;CustNo&quot;:&quot;3425964&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;Token&quot;:&quot;-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots_&quot;,&quot;AllocatedTimeSlotToken&quot;:&quot;...&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDVoidTimeSlotPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDVoidTimeSlotPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDVoidTimeSlotPostAsyncWithHttpInfo
     *
     * Void Time slot
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ProdCSID&quot;:113,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test Receiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;11848&quot;,&quot;City&quot;:&quot;Göteborg&quot;,&quot;CustNo&quot;:&quot;5&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;ERPRef&quot;:&quot;5&quot;},{&quot;Kind&quot;:10,&quot;Name1&quot;:&quot;Sender Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;43891&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;City&quot;:&quot;Landvetter&quot;,&quot;CustNo&quot;:&quot;3425964&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;Token&quot;:&quot;-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots_&quot;,&quot;AllocatedTimeSlotToken&quot;:&quot;...&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDVoidTimeSlotPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDVoidTimeSlotPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDVoidTimeSlotPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;:{&quot;ProdCSID&quot;:113,&quot;Addresses&quot;:[{&quot;Kind&quot;:1,&quot;Name1&quot;:&quot;Test Receiver&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;11848&quot;,&quot;City&quot;:&quot;Göteborg&quot;,&quot;CustNo&quot;:&quot;5&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;ERPRef&quot;:&quot;5&quot;},{&quot;Kind&quot;:10,&quot;Name1&quot;:&quot;Sender Test&quot;,&quot;Street1&quot;:&quot;Street 10&quot;,&quot;PostCode&quot;:&quot;43891&quot;,&quot;Mobile&quot;:&quot;00000000&quot;,&quot;Phone&quot;:&quot;004007123456&quot;,&quot;City&quot;:&quot;Landvetter&quot;,&quot;CustNo&quot;:&quot;3425964&quot;,&quot;CountryCode&quot;:&quot;SE&quot;,&quot;Country&quot;:&quot;Sweden&quot;,&quot;Email&quot;:&quot;a@noexitingqwerty.nnn&quot;}],&quot;Lines&quot;:[{&quot;LineWeight&quot;:4000,&quot;PkgWeight&quot;:4000,&quot;Width&quot;:10,&quot;Height&quot;:400,&quot;Length&quot;:10,&quot;Pkgs&quot;:[{&quot;ItemNo&quot;:3}],&quot;References&quot;:[{&quot;Kind&quot;:23,&quot;Value&quot;:&quot;cool stuff&quot;}]}]},&quot;options&quot;:{&quot;Token&quot;:&quot;-1_0_7892_7961_4593_5599_0_0__0__12/30/1899_12/30/1899_TimeSlots_&quot;,&quot;AllocatedTimeSlotToken&quot;:&quot;...&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDVoidTimeSlotPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDVoidTimeSlotPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/voidTimeSlot';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipServerActorIDWaybillsPost
     *
     * Get waybills
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;BookingNo&quot;: &quot;255664&quot;,&quot;CustomsRefNo&quot;: &quot;Norway&quot;,&quot;ContentsPallet&quot;: &quot;&quot;,&quot;HalfPallet&quot;: &quot;1&quot;,&quot;QuarterPallet&quot;: &quot;&quot;,&quot;Oversize&quot;: &quot;&quot;,&quot;Other&quot;: &quot;&quot;,&quot;SendersPlace&quot;: &quot;Hillerød&quot;,&quot;Date&quot;: &quot;17.10.2016&quot;,&quot;Sender&quot;: &quot;Test ApS, Frydenborgvej 32, 3400 Hillerød, Denmark&quot;,&quot;CustNo&quot;: &quot;10432061&quot;,&quot;DestinationCountryTerminal&quot;: &quot;Norway, POSTNORD&quot;,&quot;AgentNorge&quot;: &quot;&quot;,&quot;AgentReceiver&quot;: &quot;Test, 0484 Oslo, Norway&quot;,&quot;DestinationCountry&quot;: &quot;Norway&quot;,&quot;BusinessBulksplit.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.TotalNetWeight&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.0.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.1.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.2.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.3.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.ColliNo&quot;: &quot;29&quot;,&quot;MyPackBulksplit.TotalNetWeight&quot;: &quot;13&quot;,&quot;MyPackBulksplit.AddedServices.0.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedService.s1.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.2.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.3.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;Pallet.ColliNo&quot;: &quot;&quot;,&quot;Pallet.TotalNetWeight&quot;: &quot;&quot;,&quot;Pallet.AddedServices.0.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.1.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.2.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.3.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;PackageIDPallet&quot;: &quot;&quot;,&quot;BatchCSID&quot;: 4948000,&quot;CountryCode&quot;: &quot;NO&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipServerActorIDWaybillsPost($actorID, $body = null)
    {
        $this->shipServerActorIDWaybillsPostWithHttpInfo($actorID, $body);
    }

    /**
     * Operation shipServerActorIDWaybillsPostWithHttpInfo
     *
     * Get waybills
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;BookingNo&quot;: &quot;255664&quot;,&quot;CustomsRefNo&quot;: &quot;Norway&quot;,&quot;ContentsPallet&quot;: &quot;&quot;,&quot;HalfPallet&quot;: &quot;1&quot;,&quot;QuarterPallet&quot;: &quot;&quot;,&quot;Oversize&quot;: &quot;&quot;,&quot;Other&quot;: &quot;&quot;,&quot;SendersPlace&quot;: &quot;Hillerød&quot;,&quot;Date&quot;: &quot;17.10.2016&quot;,&quot;Sender&quot;: &quot;Test ApS, Frydenborgvej 32, 3400 Hillerød, Denmark&quot;,&quot;CustNo&quot;: &quot;10432061&quot;,&quot;DestinationCountryTerminal&quot;: &quot;Norway, POSTNORD&quot;,&quot;AgentNorge&quot;: &quot;&quot;,&quot;AgentReceiver&quot;: &quot;Test, 0484 Oslo, Norway&quot;,&quot;DestinationCountry&quot;: &quot;Norway&quot;,&quot;BusinessBulksplit.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.TotalNetWeight&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.0.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.1.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.2.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.3.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.ColliNo&quot;: &quot;29&quot;,&quot;MyPackBulksplit.TotalNetWeight&quot;: &quot;13&quot;,&quot;MyPackBulksplit.AddedServices.0.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedService.s1.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.2.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.3.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;Pallet.ColliNo&quot;: &quot;&quot;,&quot;Pallet.TotalNetWeight&quot;: &quot;&quot;,&quot;Pallet.AddedServices.0.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.1.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.2.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.3.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;PackageIDPallet&quot;: &quot;&quot;,&quot;BatchCSID&quot;: 4948000,&quot;CountryCode&quot;: &quot;NO&quot;}} (optional)
     *
     * @throws \LUSHDigital\NShiftPHP\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipServerActorIDWaybillsPostWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDWaybillsPostRequest($actorID, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation shipServerActorIDWaybillsPostAsync
     *
     * Get waybills
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;BookingNo&quot;: &quot;255664&quot;,&quot;CustomsRefNo&quot;: &quot;Norway&quot;,&quot;ContentsPallet&quot;: &quot;&quot;,&quot;HalfPallet&quot;: &quot;1&quot;,&quot;QuarterPallet&quot;: &quot;&quot;,&quot;Oversize&quot;: &quot;&quot;,&quot;Other&quot;: &quot;&quot;,&quot;SendersPlace&quot;: &quot;Hillerød&quot;,&quot;Date&quot;: &quot;17.10.2016&quot;,&quot;Sender&quot;: &quot;Test ApS, Frydenborgvej 32, 3400 Hillerød, Denmark&quot;,&quot;CustNo&quot;: &quot;10432061&quot;,&quot;DestinationCountryTerminal&quot;: &quot;Norway, POSTNORD&quot;,&quot;AgentNorge&quot;: &quot;&quot;,&quot;AgentReceiver&quot;: &quot;Test, 0484 Oslo, Norway&quot;,&quot;DestinationCountry&quot;: &quot;Norway&quot;,&quot;BusinessBulksplit.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.TotalNetWeight&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.0.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.1.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.2.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.3.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.ColliNo&quot;: &quot;29&quot;,&quot;MyPackBulksplit.TotalNetWeight&quot;: &quot;13&quot;,&quot;MyPackBulksplit.AddedServices.0.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedService.s1.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.2.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.3.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;Pallet.ColliNo&quot;: &quot;&quot;,&quot;Pallet.TotalNetWeight&quot;: &quot;&quot;,&quot;Pallet.AddedServices.0.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.1.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.2.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.3.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;PackageIDPallet&quot;: &quot;&quot;,&quot;BatchCSID&quot;: 4948000,&quot;CountryCode&quot;: &quot;NO&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDWaybillsPostAsync($actorID, $body = null)
    {
        return $this->shipServerActorIDWaybillsPostAsyncWithHttpInfo($actorID, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipServerActorIDWaybillsPostAsyncWithHttpInfo
     *
     * Get waybills
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;BookingNo&quot;: &quot;255664&quot;,&quot;CustomsRefNo&quot;: &quot;Norway&quot;,&quot;ContentsPallet&quot;: &quot;&quot;,&quot;HalfPallet&quot;: &quot;1&quot;,&quot;QuarterPallet&quot;: &quot;&quot;,&quot;Oversize&quot;: &quot;&quot;,&quot;Other&quot;: &quot;&quot;,&quot;SendersPlace&quot;: &quot;Hillerød&quot;,&quot;Date&quot;: &quot;17.10.2016&quot;,&quot;Sender&quot;: &quot;Test ApS, Frydenborgvej 32, 3400 Hillerød, Denmark&quot;,&quot;CustNo&quot;: &quot;10432061&quot;,&quot;DestinationCountryTerminal&quot;: &quot;Norway, POSTNORD&quot;,&quot;AgentNorge&quot;: &quot;&quot;,&quot;AgentReceiver&quot;: &quot;Test, 0484 Oslo, Norway&quot;,&quot;DestinationCountry&quot;: &quot;Norway&quot;,&quot;BusinessBulksplit.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.TotalNetWeight&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.0.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.1.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.2.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.3.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.ColliNo&quot;: &quot;29&quot;,&quot;MyPackBulksplit.TotalNetWeight&quot;: &quot;13&quot;,&quot;MyPackBulksplit.AddedServices.0.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedService.s1.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.2.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.3.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;Pallet.ColliNo&quot;: &quot;&quot;,&quot;Pallet.TotalNetWeight&quot;: &quot;&quot;,&quot;Pallet.AddedServices.0.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.1.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.2.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.3.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;PackageIDPallet&quot;: &quot;&quot;,&quot;BatchCSID&quot;: 4948000,&quot;CountryCode&quot;: &quot;NO&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipServerActorIDWaybillsPostAsyncWithHttpInfo($actorID, $body = null)
    {
        $returnType = '';
        $request = $this->shipServerActorIDWaybillsPostRequest($actorID, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipServerActorIDWaybillsPost'
     *
     * @param  int $actorID Actor ID (required)
     * @param  \LUSHDigital\NShiftPHP\Model\RequestBody $body Sample request POST: {&quot;data&quot;: {&quot;BookingNo&quot;: &quot;255664&quot;,&quot;CustomsRefNo&quot;: &quot;Norway&quot;,&quot;ContentsPallet&quot;: &quot;&quot;,&quot;HalfPallet&quot;: &quot;1&quot;,&quot;QuarterPallet&quot;: &quot;&quot;,&quot;Oversize&quot;: &quot;&quot;,&quot;Other&quot;: &quot;&quot;,&quot;SendersPlace&quot;: &quot;Hillerød&quot;,&quot;Date&quot;: &quot;17.10.2016&quot;,&quot;Sender&quot;: &quot;Test ApS, Frydenborgvej 32, 3400 Hillerød, Denmark&quot;,&quot;CustNo&quot;: &quot;10432061&quot;,&quot;DestinationCountryTerminal&quot;: &quot;Norway, POSTNORD&quot;,&quot;AgentNorge&quot;: &quot;&quot;,&quot;AgentReceiver&quot;: &quot;Test, 0484 Oslo, Norway&quot;,&quot;DestinationCountry&quot;: &quot;Norway&quot;,&quot;BusinessBulksplit.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.TotalNetWeight&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.0.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.1.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.2.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.3.Type&quot;: &quot;&quot;,&quot;BusinessBulksplit.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.ColliNo&quot;: &quot;29&quot;,&quot;MyPackBulksplit.TotalNetWeight&quot;: &quot;13&quot;,&quot;MyPackBulksplit.AddedServices.0.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedService.s1.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.2.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.3.Type&quot;: &quot;&quot;,&quot;MyPackBulksplit.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;Pallet.ColliNo&quot;: &quot;&quot;,&quot;Pallet.TotalNetWeight&quot;: &quot;&quot;,&quot;Pallet.AddedServices.0.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.0.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.1.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.1.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.2.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.2.ColliNo&quot;: &quot;&quot;,&quot;Pallet.AddedServices.3.Type&quot;: &quot;&quot;,&quot;Pallet.AddedServices.3.ColliNo&quot;: &quot;&quot;,&quot;PackageIDPallet&quot;: &quot;&quot;,&quot;BatchCSID&quot;: 4948000,&quot;CountryCode&quot;: &quot;NO&quot;}} (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipServerActorIDWaybillsPostRequest($actorID, $body = null)
    {
        // verify the required parameter 'actorID' is set
        if ($actorID === null || (is_array($actorID) && count($actorID) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actorID when calling shipServerActorIDWaybillsPost'
            );
        }

        $resourcePath = '/ShipServer/{actorID}/waybills';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($actorID !== null) {
            $resourcePath = str_replace(
                '{' . 'actorID' . '}',
                ObjectSerializer::toPathValue($actorID),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
